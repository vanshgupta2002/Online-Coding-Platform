{
  "stats": {
    "suites": 35,
    "tests": 82,
    "passes": 82,
    "pending": 0,
    "failures": 0,
    "start": "2023-05-04T16:37:46.316Z",
    "end": "2023-05-04T16:38:06.267Z",
    "duration": 19951,
    "testsRegistered": 82,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "f1e17965-712e-4d65-914f-57b78e9b6b20",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "5708d84e-247d-4f4b-8490-8498d68d2c4d",
          "title": "Blog",
          "fullFile": "/home/nishant/Documents/6th sem/CS305/Final/Main Folder/server/test/blog.test.js",
          "file": "/test/blog.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "6f5ec57a-ea4d-47d1-97c2-ae07f3b7f74b",
              "title": "postBlog",
              "fullFile": "/home/nishant/Documents/6th sem/CS305/Final/Main Folder/server/test/blog.test.js",
              "file": "/test/blog.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"postBlog\"",
                  "fullTitle": "Blog postBlog \"before each\" hook in \"postBlog\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Mocking req and res objects\nreq = {\n  body: {\n    userToken: \"validToken\",\n  },\n};\nres = {\n  send: stub(),\n};\n// Mocking adminJWT, adminDB, and blog objects\nadminJWT = {\n  verifyToken: stub(),\n};\nadminDB = {\n  insertOne: stub(),\n  blog: {},\n};\ntestBlog = new Blog(adminDB, adminJWT);\n// Importing the postBlog function",
                  "err": {},
                  "uuid": "f9135681-689f-477e-9639-4003f01fae69",
                  "parentUUID": "6f5ec57a-ea4d-47d1-97c2-ae07f3b7f74b",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [
                {
                  "title": "\"after each\" hook in \"postBlog\"",
                  "fullTitle": "Blog postBlog \"after each\" hook in \"postBlog\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Restoring the stubbed functions\nrestore();",
                  "err": {},
                  "uuid": "d7a84404-a4e4-407e-953e-c9bb4bf9271e",
                  "parentUUID": "6f5ec57a-ea4d-47d1-97c2-ae07f3b7f74b",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [
                {
                  "title": "should post a blog and send success response",
                  "fullTitle": "Blog postBlog should post a blog and send success response",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Stubbing adminJWT.verifyToken to return handle and type\nadminJWT.verifyToken.returns({ handle: handle, type: type });\n// Stubbing adminDB.insertOne to return data\nadminDB.insertOne.returns({});\n// Calling the postBlog function\nawait testBlog.postBlog(req, res);\n// Assertions\nexpect(adminJWT.verifyToken.calledOnceWith(req.body.userToken)).to.be\n  .true;\nexpect(\n  adminDB.insertOne.calledOnceWith(adminDB.blog, match.instanceOf(blog))\n).to.be.true;\nexpect(\n  res.send.calledOnceWith({ success: true, message: \"Blog posted.\" })\n).to.be.true;",
                  "err": {},
                  "uuid": "90110fe5-4215-446e-a054-811c1e18d1a2",
                  "parentUUID": "6f5ec57a-ea4d-47d1-97c2-ae07f3b7f74b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle TokenExpiredError and send appropriate response",
                  "fullTitle": "Blog postBlog should handle TokenExpiredError and send appropriate response",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Stubbing adminJWT.verifyToken to throw TokenExpiredError\nadminJWT.verifyToken.throws(new TokenExpiredError(\"Token expired\"));\n// Calling the postBlog function\nawait testBlog.postBlog(req, res);\n// Assertions\nexpect(adminJWT.verifyToken.calledOnceWith(req.body.userToken)).to.be\n  .true;\nexpect(\n  res.send.calledOnceWith({\n    success: false,\n    message: \"Token has expired.\",\n  })\n).to.be.true;",
                  "err": {},
                  "uuid": "38f4476a-406a-436f-adc9-5219fa0bdbcd",
                  "parentUUID": "6f5ec57a-ea4d-47d1-97c2-ae07f3b7f74b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle other errors and send error response",
                  "fullTitle": "Blog postBlog should handle other errors and send error response",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Stubbing adminJWT.verifyToken to throw an error\nadminJWT.verifyToken.throws(new Error(\"Some error\"));\n// Calling the postBlog function\nawait testBlog.postBlog(req, res);\n// Assertions\nexpect(adminJWT.verifyToken.calledOnceWith(req.body.userToken)).to.be\n  .true;\nexpect(\n  res.send.calledOnceWith({\n    success: false,\n    message: \"Blog posting failed.\",\n  })\n).to.be.true;",
                  "err": {},
                  "uuid": "b690451b-8f15-45fd-8309-e6e6454e1ebe",
                  "parentUUID": "6f5ec57a-ea4d-47d1-97c2-ae07f3b7f74b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "90110fe5-4215-446e-a054-811c1e18d1a2",
                "38f4476a-406a-436f-adc9-5219fa0bdbcd",
                "b690451b-8f15-45fd-8309-e6e6454e1ebe"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 7,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "9078150f-a2a2-40be-b680-0f86f2d5c690",
              "title": "postEditorial",
              "fullFile": "/home/nishant/Documents/6th sem/CS305/Final/Main Folder/server/test/blog.test.js",
              "file": "/test/blog.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"postEditorial\"",
                  "fullTitle": "Blog postEditorial \"before each\" hook in \"postEditorial\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Mocking req and res objects\nreq = {\n  body: {\n    userToken: \"validToken\",\n  },\n};\nres = {\n  send: stub(),\n};\n// Mocking adminJWT, adminDB, and editorial objects\nadminJWT = {\n  verifyToken: stub(),\n};\nadminDB = {\n  insertOne: stub(),\n  editorials: \"editorials\",\n};\ntestEditorial = new Blog(adminDB, adminJWT);\n// Importing the postEditorial function",
                  "err": {},
                  "uuid": "c9e52e41-3330-4669-9e9c-d3657c40d39e",
                  "parentUUID": "9078150f-a2a2-40be-b680-0f86f2d5c690",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [
                {
                  "title": "\"after each\" hook in \"postEditorial\"",
                  "fullTitle": "Blog postEditorial \"after each\" hook in \"postEditorial\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Restoring the stubbed functions\nrestore();",
                  "err": {},
                  "uuid": "e6e8f5f9-1fea-40dd-8ef7-ab105c7e7044",
                  "parentUUID": "9078150f-a2a2-40be-b680-0f86f2d5c690",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [
                {
                  "title": "should post an editorial and send success response",
                  "fullTitle": "Blog postEditorial should post an editorial and send success response",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Stubbing adminJWT.verifyToken to return handle and type\nadminJWT.verifyToken.returns({ handle: handle, type: \"1\" });\n// Stubbing adminDB.insertOne to return data\nadminDB.insertOne.returns({});\n// Calling the postEditorial function\nawait testEditorial.postEditorial(req, res);\n// Assertions\nexpect(adminJWT.verifyToken.calledOnceWith(req.body.userToken)).to.be\n  .true;\nexpect(\n  adminDB.insertOne.calledOnceWith(\n    adminDB.editorials,\n    match.instanceOf(editorial)\n  )\n).to.be.true;\nexpect(\n  res.send.calledOnceWith({ success: true, message: \"Editorial posted.\" })\n).to.be.true;",
                  "err": {},
                  "uuid": "196aabd1-0dd7-43a3-a5d1-0e47ab7bde1b",
                  "parentUUID": "9078150f-a2a2-40be-b680-0f86f2d5c690",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not post an editorial and send unauthorized response for type 0",
                  "fullTitle": "Blog postEditorial should not post an editorial and send unauthorized response for type 0",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Stubbing adminJWT.verifyToken to return handle and type\nadminJWT.verifyToken.returns({ handle: handle, type: \"0\" });\n// Calling the postEditorial function\nawait testEditorial.postEditorial(req, res);\n// Assertions\nexpect(adminJWT.verifyToken.calledOnceWith(req.body.userToken)).to.be\n  .true;\nexpect(\n  res.send.calledOnceWith({\n    success: false,\n    message: \"You are not authorized to post editorials.\",\n  })\n).to.be.true;",
                  "err": {},
                  "uuid": "9446703b-1875-4f58-8e79-2a95bd277dd4",
                  "parentUUID": "9078150f-a2a2-40be-b680-0f86f2d5c690",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle TokenExpiredError and send appropriate response",
                  "fullTitle": "Blog postEditorial should handle TokenExpiredError and send appropriate response",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Stubbing adminJWT.verifyToken to throw TokenExpiredError\nadminJWT.verifyToken.throws(new TokenExpiredError(\"Token expired\"));\n// Calling the postEditorial function\nawait testEditorial.postEditorial(req, res);\n// Assertions\nexpect(adminJWT.verifyToken.calledOnceWith(req.body.userToken)).to.be\n  .true;\nexpect(\n  res.send.calledOnceWith({\n    success: false,\n    message: \"Token has expired.\",\n  })\n).to.be.true;",
                  "err": {},
                  "uuid": "0e8425d3-92a3-4ef2-9790-2f722724fc99",
                  "parentUUID": "9078150f-a2a2-40be-b680-0f86f2d5c690",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle other errors and send error response",
                  "fullTitle": "Blog postEditorial should handle other errors and send error response",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Stubbing adminJWT.verifyToken to throw an error\nadminJWT.verifyToken.throws(new Error(\"Some error\"));\n// Calling the postEditorial function\nawait testEditorial.postEditorial(req, res);\n// Assertions\nexpect(adminJWT.verifyToken.calledOnceWith(req.body.userToken)).to.be\n  .true;\nexpect(\n  res.send.calledOnceWith({\n    success: false,\n    message: \"Editorial posting failed.\",\n  })\n).to.be.true;",
                  "err": {},
                  "uuid": "7552bdfc-bf64-4b4e-b1be-ff80956924c6",
                  "parentUUID": "9078150f-a2a2-40be-b680-0f86f2d5c690",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle other errors and send error response",
                  "fullTitle": "Blog postEditorial should handle other errors and send error response",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Stubbing adminJWT.verifyToken to throw an error\nadminJWT.verifyToken.throws(new Error(\"Some error\"));\n// Calling the postEditorial function\nawait testEditorial.postEditorial(req, res);\n// Assertions\nexpect(adminJWT.verifyToken.calledOnceWith(req.body.userToken)).to.be\n  .true;\nexpect(\n  res.send.calledOnceWith({\n    success: false,\n    message: \"Editorial posting failed.\",\n  })\n).to.be.true;",
                  "err": {},
                  "uuid": "cde22932-7e08-47f7-9d7a-e582b3e6f018",
                  "parentUUID": "9078150f-a2a2-40be-b680-0f86f2d5c690",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "196aabd1-0dd7-43a3-a5d1-0e47ab7bde1b",
                "9446703b-1875-4f58-8e79-2a95bd277dd4",
                "0e8425d3-92a3-4ef2-9790-2f722724fc99",
                "7552bdfc-bf64-4b4e-b1be-ff80956924c6",
                "cde22932-7e08-47f7-9d7a-e582b3e6f018"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "99137bd7-8242-4cea-bfbe-4e2e18b45729",
              "title": "getBlog",
              "fullFile": "/home/nishant/Documents/6th sem/CS305/Final/Main Folder/server/test/blog.test.js",
              "file": "/test/blog.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"getBlog\"",
                  "fullTitle": "Blog getBlog \"before each\" hook in \"getBlog\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Mocking req and res objects\nreq = {\n  body: {\n    blogId: \"validBlogId1\",\n  },\n};\nres = {\n  send: stub(),\n};\n// Mocking adminDB object\nadminDB = {\n  findOne: stub(),\n  blog: \"blog\",\n};\n// Importing the getBlogComments function\ntestBlog = new Blog(adminDB, {});",
                  "err": {},
                  "uuid": "5799ecbb-9601-4169-93d1-4f1496a31dc8",
                  "parentUUID": "99137bd7-8242-4cea-bfbe-4e2e18b45729",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should get blog comments and send success response",
                  "fullTitle": "Blog getBlog should get blog comments and send success response",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expectedComments = [\"comment1\", \"comment2\"];\n// Stubbing adminDB.findOne to return data with comments\nadminDB.findOne.returns({ comments: expectedComments });\n// Calling the getBlogComments function\nawait testBlog.getBlog(req, res);\n// Assertions\nexpect(\n  adminDB.findOne.calledOnceWith(\n    adminDB.blog,\n    { _id: new ObjectId(\"validBlogId1\") },\n  )\n).to.be.true;\nexpect(\n  res.send.calledOnceWith({\n    data: { comments: expectedComments },\n    success: true,\n    message: \"Data sent successfully.\",\n  })\n).to.be.true;",
                  "err": {},
                  "uuid": "0dbdebf1-aecd-40fb-b9be-c1d1b9ba277f",
                  "parentUUID": "99137bd7-8242-4cea-bfbe-4e2e18b45729",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle error and send error response",
                  "fullTitle": "Blog getBlog should handle error and send error response",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Stubbing adminDB.findOne to throw an error\nadminDB.findOne.throws(new Error(\"Some error\"));\n// Calling the getBlogComments function\nawait testBlog.getBlog(req, res);\n// Assertions\nexpect(\n  adminDB.findOne.calledOnceWith(\n    adminDB.blog,\n    { _id: new ObjectId(\"validBlogId1\") },\n    \n  )\n).to.be.true;\nexpect(\n  res.send.calledOnceWith({\n    success: false,\n    message: \"Data could not be sent due to some internal error.\",\n  })\n).to.be.true;",
                  "err": {},
                  "uuid": "981fce9a-a223-4035-9aa6-a0be0066ab1f",
                  "parentUUID": "99137bd7-8242-4cea-bfbe-4e2e18b45729",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0dbdebf1-aecd-40fb-b9be-c1d1b9ba277f",
                "981fce9a-a223-4035-9aa6-a0be0066ab1f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b8b5a4d7-b70f-45c4-a5fa-22269beeec24",
              "title": "getBlogs",
              "fullFile": "/home/nishant/Documents/6th sem/CS305/Final/Main Folder/server/test/blog.test.js",
              "file": "/test/blog.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"getBlogs\"",
                  "fullTitle": "Blog getBlogs \"before each\" hook in \"getBlogs\"",
                  "timedOut": false,
                  "duration": 1,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Mocking res object\nres = {\n  send: stub(),\n};\n// Mocking adminDB object\nadminDB = {\n  find:stub(),\n  blog: 'blog',\n};\n// Importing the getBlogs function\ntestBlog = new Blog(adminDB, {});",
                  "err": {},
                  "uuid": "5ef2c77f-c8e3-4319-8825-4c43b1ba1290",
                  "parentUUID": "b8b5a4d7-b70f-45c4-a5fa-22269beeec24",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should get blogs and send success response",
                  "fullTitle": "Blog getBlogs should get blogs and send success response",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expectedBlogs = ['blog1', 'blog2'];\n// Stubbing adminDB.find to return data with blogs\nadminDB.find.returns(expectedBlogs);\n// Calling the getBlogs function\nawait testBlog.getBlogs({}, res);\n// Assertions\nexpect(adminDB.find.calledOnceWith(adminDB.blog, {}, { timestamp: -1 }, { comments: 0 })).to.be.true;\nexpect(res.send.calledOnceWith({ data: expectedBlogs, success: true, message: 'Blogs sent successfully.' })).to.be.true;",
                  "err": {},
                  "uuid": "681b7e1d-c386-4068-8be8-72b16b7d8c49",
                  "parentUUID": "b8b5a4d7-b70f-45c4-a5fa-22269beeec24",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle error and send error response",
                  "fullTitle": "Blog getBlogs should handle error and send error response",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Stubbing adminDB.find to throw an error\nadminDB.find.throws(new Error('Some error'));\n// Calling the getBlogs function\nawait testBlog.getBlogs({}, res);\n// Assertions\nexpect(adminDB.find.calledOnceWith(adminDB.blog, {}, { timestamp: -1 }, { comments: 0 })).to.be.true;\nexpect(res.send.calledOnceWith({ success: false, message: 'Blogs could not be sent due to some internal error.' })).to.be.true;",
                  "err": {},
                  "uuid": "5728161a-59f7-49bb-994b-eedce0d70e1a",
                  "parentUUID": "b8b5a4d7-b70f-45c4-a5fa-22269beeec24",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "681b7e1d-c386-4068-8be8-72b16b7d8c49",
                "5728161a-59f7-49bb-994b-eedce0d70e1a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "6cf1db9a-c092-4a5e-ba56-a39e62994c73",
              "title": "comment",
              "fullFile": "/home/nishant/Documents/6th sem/CS305/Final/Main Folder/server/test/blog.test.js",
              "file": "/test/blog.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"comment\"",
                  "fullTitle": "Blog comment \"before each\" hook in \"comment\"",
                  "timedOut": false,
                  "duration": 1,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "adminDB = {\n  updateOne: sinon.stub(),\n  blog: 'blog',\n}\nadminJWT = {\n  verifyToken: sinon.stub(),\n};\nreq = {\n  body: {\n    userToken: 'testToken',\n    Id: 'testId123445',\n    entityType: 'blog',\n    comment: 'testComment',\n    timestamp: Date.now(),\n  },\n};\nres = {\n  send: sinon.spy(),\n};\ncomment = new Blog(adminDB, adminJWT).comment;",
                  "err": {},
                  "uuid": "28c753e4-f408-4704-9432-599d9c4f71a2",
                  "parentUUID": "6cf1db9a-c092-4a5e-ba56-a39e62994c73",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should post a comment to a blog or editorial",
                  "fullTitle": "Blog comment should post a comment to a blog or editorial",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const decodeData = { handle: 'testHandle' };\nconst updateResult = { modifiedCount: 1 };\nconst expectedComment = {\n  handle: decodeData.handle,\n  comment: req.body.comment,\n  timestamp: req.body.timestamp,\n};\nadminJWT.verifyToken.returns(decodeData);\nadminDB.updateOne.returns(updateResult);\nawait comment(req, res);\nexpect(adminJWT.verifyToken.calledOnce).to.be.true;\nexpect(adminJWT.verifyToken.firstCall.args[0]).to.equal(req.body.userToken);\nexpect(adminDB.updateOne.calledOnce).to.be.true;\n// expect(adminDB.updateOne.firstCall.args[0]).to.equal(adminDB.blog);\n// expect(adminDB.updateOne.firstCall.args[1]).to.deep.equal({\n//   _id: new ObjectId(req.body.Id),\n// });\n// expect(adminDB.updateOne.firstCall.args[2]).to.deep.equal({\n//   $push: {\n//     comments: expectedComment,\n//   },\n// });\nexpect(res.send.calledOnce).to.be.true;\nexpect(res.send.firstCall.args[0]).to.deep.equal({\n  success: true,\n  message: 'Comment posted.',\n});",
                  "err": {},
                  "uuid": "22d43e3f-e0c2-4534-bc21-d23d2cccf70c",
                  "parentUUID": "6cf1db9a-c092-4a5e-ba56-a39e62994c73",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle token expired errors",
                  "fullTitle": "Blog comment should handle token expired errors",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expiredError = new TokenExpiredError('TokenExpiredError');\nadminJWT.verifyToken.throws(expiredError);\nawait comment(req, res);\nexpect(res.send.calledOnce).to.be.true;\nexpect(res.send.firstCall.args[0]).to.deep.equal({\n  success: false,\n  message: 'Token has expired.',\n});",
                  "err": {},
                  "uuid": "39c1a890-b770-45b3-8a8b-b6c1c9ae5b58",
                  "parentUUID": "6cf1db9a-c092-4a5e-ba56-a39e62994c73",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle other errors",
                  "fullTitle": "Blog comment should handle other errors",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const errorMessage = 'Error posting comment';\nadminDB.updateOne = sinon.stub().throws(new Error(errorMessage));\nadminJWT.verifyToken.returns({ handle: 'testHandle' });\nawait comment(req, res);\nexpect(res.send.calledOnce).to.be.true;\nexpect(res.send.firstCall.args[0]).to.deep.equal({\n  success: false,\n  message: 'Comment cannot be posted due to internal error.',\n});",
                  "err": {},
                  "uuid": "dbc0640c-9dea-42c1-9065-5ba8251e6f02",
                  "parentUUID": "6cf1db9a-c092-4a5e-ba56-a39e62994c73",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "22d43e3f-e0c2-4534-bc21-d23d2cccf70c",
                "39c1a890-b770-45b3-8a8b-b6c1c9ae5b58",
                "dbc0640c-9dea-42c1-9065-5ba8251e6f02"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 7,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "a949ff15-0b5b-4ad5-8008-c88e2ee8c72a",
          "title": "database",
          "fullFile": "/home/nishant/Documents/6th sem/CS305/Final/Main Folder/server/test/database.test.js",
          "file": "/test/database.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "d805c733-f36a-4d80-b6dc-4417c9b070c1",
              "title": "connect",
              "fullFile": "/home/nishant/Documents/6th sem/CS305/Final/Main Folder/server/test/database.test.js",
              "file": "/test/database.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"connect\"",
                  "fullTitle": "database connect \"before each\" hook in \"connect\"",
                  "timedOut": false,
                  "duration": 57,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mongoserver = await MongoMemoryServer.create();\nuri = mongoserver.getUri();  \ntestDatabase = new database(uri,databaseName);",
                  "err": {},
                  "uuid": "b98c30b2-4814-4465-a647-0ac115396e5a",
                  "parentUUID": "d805c733-f36a-4d80-b6dc-4417c9b070c1",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [
                {
                  "title": "\"after each\" hook in \"connect\"",
                  "fullTitle": "database connect \"after each\" hook in \"connect\"",
                  "timedOut": false,
                  "duration": 20,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await mongoserver.stop();",
                  "err": {},
                  "uuid": "90792c28-0a61-47f1-beed-97a0f34c28f7",
                  "parentUUID": "d805c733-f36a-4d80-b6dc-4417c9b070c1",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [
                {
                  "title": "should connect to the database",
                  "fullTitle": "database connect should connect to the database",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const consoleSpy = spy(console,\"log\");\nconst dbMock = {collection : stub()} // mock database collection\nconst clientMock = {\n    connect : stub().resolves() //returns a resolved promise (Which stimulates the condition when database is connected)\n, db : stub().returns(dbMock)}; //returns a mock database\ntestDatabase.client = clientMock;\nawait testDatabase.connect();\nexpect(clientMock.connect.calledOnce).to.be.true;\nexpect(consoleSpy.calledOnce).to.be.true;\nexpect(consoleSpy.firstCall.args[0]).to.equal(\"DB Connection successful\");\nexpect(clientMock.db.calledWith(databaseName)).to.be.true;\nexpect(dbMock.collection.calledWith(\"Users\")).to.be.true;\nexpect(dbMock.collection.calledWith(\"otp\")).to.be.true;\nexpect(dbMock.collection.calledWith(\"Problems\")).to.be.true;\nexpect(dbMock.collection.calledWith(\"Blogs\")).to.be.true;\nexpect(dbMock.collection.calledWith(\"Editorials\")).to.be.true;\nexpect(dbMock.collection.calledWith(\"SubmittedSolutions\")).to.be.true;\nexpect(dbMock.collection.calledWith(\"Solved\")).to.be.true;\nconsoleSpy.restore();",
                  "err": {},
                  "uuid": "06713b72-33f8-4826-93d6-b5261c69a961",
                  "parentUUID": "d805c733-f36a-4d80-b6dc-4417c9b070c1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "06713b72-33f8-4826-93d6-b5261c69a961"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3389972c-35db-46c9-b858-5f1efbf3467e",
              "title": "findOne",
              "fullFile": "/home/nishant/Documents/6th sem/CS305/Final/Main Folder/server/test/database.test.js",
              "file": "/test/database.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"findOne\"",
                  "fullTitle": "database findOne \"before each\" hook in \"findOne\"",
                  "timedOut": false,
                  "duration": 60,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mongoserver = await MongoMemoryServer.create();\nuri = mongoserver.getUri();\nlet databaseName = \"test\";\ntestDatabase = new database(uri,databaseName);\nawait testDatabase.connect();",
                  "err": {},
                  "uuid": "6f6e1908-47a4-4b50-8e74-c735ce4b5677",
                  "parentUUID": "3389972c-35db-46c9-b858-5f1efbf3467e",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [
                {
                  "title": "\"after each\" hook in \"findOne\"",
                  "fullTitle": "database findOne \"after each\" hook in \"findOne\"",
                  "timedOut": false,
                  "duration": 21,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await testDatabase.disconnect();\n  await mongoserver.stop();",
                  "err": {},
                  "uuid": "2c575075-384a-4811-98f4-67fd60c907d5",
                  "parentUUID": "3389972c-35db-46c9-b858-5f1efbf3467e",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [
                {
                  "title": "should return a document",
                  "fullTitle": "database findOne should return a document",
                  "timedOut": false,
                  "duration": 15,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Insert a document into the collection for testing\nconst doc = { name: 'user', age: 21 };\nawait testDatabase.users.insertOne(doc);\n      \n// Call the findOne function with the query object\nconst query = { name: 'user' };\nconst fields = { age:21, _id:0 };\nconst result = await testDatabase.findOne(testDatabase.users, query, fields);\n      \n// Assert that the result matches the expected document\nexpect (result).to.be.an('object');\n  expect (result).to.deep.equal({ age:21 });",
                  "err": {},
                  "uuid": "67a3b26c-2db0-455d-834b-43f9ef6fb1ea",
                  "parentUUID": "3389972c-35db-46c9-b858-5f1efbf3467e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "67a3b26c-2db0-455d-834b-43f9ef6fb1ea"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 15,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3874ba1e-1adb-411b-a693-f4e906a872ea",
              "title": "insertOne",
              "fullFile": "/home/nishant/Documents/6th sem/CS305/Final/Main Folder/server/test/database.test.js",
              "file": "/test/database.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"insertOne\"",
                  "fullTitle": "database insertOne \"before each\" hook in \"insertOne\"",
                  "timedOut": false,
                  "duration": 39,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mongoserver = await MongoMemoryServer.create();\nuri = mongoserver.getUri();\nlet databaseName = \"test\";\ntestDatabase = new database(uri,databaseName);\nawait testDatabase.connect();",
                  "err": {},
                  "uuid": "9ecad827-abad-4f4d-b9cc-81bcf5de5be7",
                  "parentUUID": "3874ba1e-1adb-411b-a693-f4e906a872ea",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [
                {
                  "title": "\"after each\" hook in \"insertOne\"",
                  "fullTitle": "database insertOne \"after each\" hook in \"insertOne\"",
                  "timedOut": false,
                  "duration": 20,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await testDatabase.disconnect();\n  await mongoserver.stop();",
                  "err": {},
                  "uuid": "6635d545-1fd7-4af9-84ac-28210e870f70",
                  "parentUUID": "3874ba1e-1adb-411b-a693-f4e906a872ea",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [
                {
                  "title": "should insert a document",
                  "fullTitle": "database insertOne should insert a document",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Insert a document into the collection for testing\nconst doc = { name: 'user', age: 21 };\nlet insertData = await testDatabase.insertOne(testDatabase.users,doc);\n  // Assert that the result matches the expected document\nexpect (insertData.acknowledged).to.equal(true);\nexpect (insertData.insertedId).to.not.equal(null | undefined);",
                  "err": {},
                  "uuid": "deab6e5d-3b70-4380-9be8-82066edb78c3",
                  "parentUUID": "3874ba1e-1adb-411b-a693-f4e906a872ea",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "deab6e5d-3b70-4380-9be8-82066edb78c3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a3fa0042-6dd3-4437-80b2-e21683eff2b3",
              "title": "updateOne",
              "fullFile": "/home/nishant/Documents/6th sem/CS305/Final/Main Folder/server/test/database.test.js",
              "file": "/test/database.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"updateOne\"",
                  "fullTitle": "database updateOne \"before each\" hook in \"updateOne\"",
                  "timedOut": false,
                  "duration": 46,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mongoserver = await MongoMemoryServer.create();\nuri = mongoserver.getUri();\nlet databaseName = \"test\";\ntestDatabase = new database(uri,databaseName);\nawait testDatabase.connect();",
                  "err": {},
                  "uuid": "2eb53e74-8835-457c-81ab-ae974f4d44bd",
                  "parentUUID": "a3fa0042-6dd3-4437-80b2-e21683eff2b3",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [
                {
                  "title": "\"after each\" hook in \"updateOne\"",
                  "fullTitle": "database updateOne \"after each\" hook in \"updateOne\"",
                  "timedOut": false,
                  "duration": 22,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await testDatabase.disconnect();\n  await mongoserver.stop();",
                  "err": {},
                  "uuid": "29a37dc5-cba5-4e53-9119-6df0f3f1c215",
                  "parentUUID": "a3fa0042-6dd3-4437-80b2-e21683eff2b3",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [
                {
                  "title": "should return a document",
                  "fullTitle": "database updateOne should return a document",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Insert a document into the collection for testing\nconst doc = { name: 'user', age: 21,hobby : []};\nawait testDatabase.users.insertOne(doc);\n    \n// Call the findOne function with the query object\nlet query = { name: 'user' };\nlet result = await testDatabase.updateOne(testDatabase.users, query, {$set : {name: \"newUser\"}});\nexpect(result).to.be.an('object');\nexpect(result.acknowledged).to.equal(true);\nexpect(result.modifiedCount).to.equal(1);\nquery = { name: 'newUser' };\nresult = await testDatabase.updateOne(testDatabase.users, query, {$push : {hobby: \"newUser\"}});\nexpect(result).to.be.an('object');\nexpect(result.acknowledged).to.equal(true);\nexpect(result.modifiedCount).to.equal(1);",
                  "err": {},
                  "uuid": "96eb2f0c-8b7e-4ae5-8266-6eef7fb89eb8",
                  "parentUUID": "a3fa0042-6dd3-4437-80b2-e21683eff2b3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "96eb2f0c-8b7e-4ae5-8266-6eef7fb89eb8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "2e4d3c88-659c-4c2f-b2aa-8943e3a3e0f1",
              "title": "deleteOne",
              "fullFile": "/home/nishant/Documents/6th sem/CS305/Final/Main Folder/server/test/database.test.js",
              "file": "/test/database.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"deleteOne\"",
                  "fullTitle": "database deleteOne \"before each\" hook in \"deleteOne\"",
                  "timedOut": false,
                  "duration": 41,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mongoserver = await MongoMemoryServer.create();\nuri = mongoserver.getUri();\nlet databaseName = \"test\";\ntestDatabase = new database(uri,databaseName);\nawait testDatabase.connect();",
                  "err": {},
                  "uuid": "b756b14d-4d28-44b7-bc8b-d0bb9d6e4fe7",
                  "parentUUID": "2e4d3c88-659c-4c2f-b2aa-8943e3a3e0f1",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [
                {
                  "title": "\"after each\" hook in \"deleteOne\"",
                  "fullTitle": "database deleteOne \"after each\" hook in \"deleteOne\"",
                  "timedOut": false,
                  "duration": 20,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await testDatabase.disconnect();\n  await mongoserver.stop();",
                  "err": {},
                  "uuid": "0edc9ad0-9bf2-4310-a33b-68f4fee59e2d",
                  "parentUUID": "2e4d3c88-659c-4c2f-b2aa-8943e3a3e0f1",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [
                {
                  "title": "should delete a document",
                  "fullTitle": "database deleteOne should delete a document",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Insert a document into the collection for testing\nconst doc = { name: 'user', age: 21};\nawait testDatabase.users.insertOne(doc);\n    \n// Call the findOne function with the query object\nlet query = { name: 'user' };\nlet result = await testDatabase.deleteOne(testDatabase.users, query);\nexpect(result).to.be.an('object');\nexpect(result.acknowledged).to.equal(true);\nexpect(result.deletedCount).to.equal(1);",
                  "err": {},
                  "uuid": "b124d853-1975-4ecb-bccd-75318a5d62d5",
                  "parentUUID": "2e4d3c88-659c-4c2f-b2aa-8943e3a3e0f1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b124d853-1975-4ecb-bccd-75318a5d62d5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "faebaaf2-950e-4e5c-9cf9-af77c07c1e0c",
              "title": "find",
              "fullFile": "/home/nishant/Documents/6th sem/CS305/Final/Main Folder/server/test/database.test.js",
              "file": "/test/database.test.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"find\"",
                  "fullTitle": "database find \"before all\" hook in \"find\"",
                  "timedOut": false,
                  "duration": 52,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Create a test collection and insert some documents\nmongoserver = await MongoMemoryServer.create();\nuri = mongoserver.getUri();\nlet databaseName = \"test\";\ntestDatabase = new database(uri,databaseName);\nawait testDatabase.client.connect();\ntestDatabase.users = testDatabase.client.db(testDatabase.database).collection('users');\nawait testDatabase.users.insertMany([\n  { name: 'user1', age: 21 },\n  { name: 'user2', age: 22 },\n  { name: 'user3', age: 23 },\n]);",
                  "err": {},
                  "uuid": "fc17be9b-2e3b-48b9-b0e0-5d30fbd9a17e",
                  "parentUUID": "faebaaf2-950e-4e5c-9cf9-af77c07c1e0c",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [
                {
                  "title": "\"after all\" hook in \"find\"",
                  "fullTitle": "database find \"after all\" hook in \"find\"",
                  "timedOut": false,
                  "duration": 18,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await testDatabase.client.close();\n  await mongoserver.stop();",
                  "err": {},
                  "uuid": "c5088abb-d90f-4f6a-b30a-20353cb4488e",
                  "parentUUID": "faebaaf2-950e-4e5c-9cf9-af77c07c1e0c",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [
                {
                  "title": "should find all documents in the collection",
                  "fullTitle": "database find should find all documents in the collection",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const docs = await testDatabase.find(testDatabase.users);\nexpect(docs).to.have.lengthOf(3);",
                  "err": {},
                  "uuid": "06173e72-2ea0-468d-b018-1b2174654724",
                  "parentUUID": "faebaaf2-950e-4e5c-9cf9-af77c07c1e0c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should find documents with a query object",
                  "fullTitle": "database find should find documents with a query object",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const docs = await testDatabase.find(testDatabase.users, { name: 'user1' });\nexpect(docs).to.have.lengthOf(1);\nexpect(docs[0].name).to.equal('user1');",
                  "err": {},
                  "uuid": "e3776223-08bf-4241-85b2-f1a58edde35d",
                  "parentUUID": "faebaaf2-950e-4e5c-9cf9-af77c07c1e0c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should sort documents with a sort object",
                  "fullTitle": "database find should sort documents with a sort object",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const docs = await testDatabase.find(testDatabase.users, {}, { age: -1 });\nexpect(docs).to.have.lengthOf(3);\nexpect(docs[0].name).to.equal('user3');",
                  "err": {},
                  "uuid": "99e41890-f9d0-42d8-8107-4507df18e35e",
                  "parentUUID": "faebaaf2-950e-4e5c-9cf9-af77c07c1e0c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should project documents with a fields object",
                  "fullTitle": "database find should project documents with a fields object",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const docs = await testDatabase.find(testDatabase.users, {}, {}, { name: 1 });\nexpect(docs).to.have.lengthOf(3);\nexpect(docs[0].name).to.exist;\nexpect(docs[0].age).to.not.exist;",
                  "err": {},
                  "uuid": "1ac16aaa-e7e7-4f87-ab18-92c4a81835fc",
                  "parentUUID": "faebaaf2-950e-4e5c-9cf9-af77c07c1e0c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "06173e72-2ea0-468d-b018-1b2174654724",
                "e3776223-08bf-4241-85b2-f1a58edde35d",
                "99e41890-f9d0-42d8-8107-4507df18e35e",
                "1ac16aaa-e7e7-4f87-ab18-92c4a81835fc"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f871d252-67fa-4bfd-a9ef-a395add6e108",
              "title": "update",
              "fullFile": "/home/nishant/Documents/6th sem/CS305/Final/Main Folder/server/test/database.test.js",
              "file": "/test/database.test.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"update\"",
                  "fullTitle": "database update \"before all\" hook in \"update\"",
                  "timedOut": false,
                  "duration": 50,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Create a test collection and insert some documents\nmongoserver = await MongoMemoryServer.create();\nuri = mongoserver.getUri();\nlet databaseName = \"test\";\ntestDatabase = new database(uri,databaseName);\nawait testDatabase.client.connect();\ntestDatabase.users = testDatabase.client.db(testDatabase.database).collection('users');\nawait testDatabase.users.insertMany([\n  { name: 'user1', age: 21,hobby:[] },\n  { name: 'user2', age: 22 ,hobby:[]},\n  { name: 'user3', age: 23 ,hobby:[]},\n]);",
                  "err": {},
                  "uuid": "148705d1-013d-4a38-8f0c-332eb14028a5",
                  "parentUUID": "f871d252-67fa-4bfd-a9ef-a395add6e108",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [
                {
                  "title": "\"after all\" hook in \"update\"",
                  "fullTitle": "database update \"after all\" hook in \"update\"",
                  "timedOut": false,
                  "duration": 19,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await testDatabase.client.close();\n  await mongoserver.stop();",
                  "err": {},
                  "uuid": "56d8fb18-875f-4af0-a573-e5400aca953d",
                  "parentUUID": "f871d252-67fa-4bfd-a9ef-a395add6e108",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [
                {
                  "title": "should set some values to all the documents with the required filter",
                  "fullTitle": "database update should set some values to all the documents with the required filter",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const docs = await testDatabase.update(testDatabase.users, {  }, { $set: { age:50 } });\nexpect(docs.modifiedCount).to.equal(3);",
                  "err": {},
                  "uuid": "65be206c-a18b-4f33-b422-31ebde36870a",
                  "parentUUID": "f871d252-67fa-4bfd-a9ef-a395add6e108",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should push values in ana array to all the documents with the required filter",
                  "fullTitle": "database update should push values in ana array to all the documents with the required filter",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const docs = await testDatabase.update(testDatabase.users, { age: {$gt:21} }, { $push: { hobby:\"newHobby\" } });\nexpect(docs.modifiedCount).to.equal(3);",
                  "err": {},
                  "uuid": "224cc51a-ccf0-47ee-8ace-04de6b3d093c",
                  "parentUUID": "f871d252-67fa-4bfd-a9ef-a395add6e108",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "65be206c-a18b-4f33-b422-31ebde36870a",
                "224cc51a-ccf0-47ee-8ace-04de6b3d093c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "6d0900be-d2f8-4c42-aea6-d35ee549d4cc",
          "title": "Email",
          "fullFile": "/home/nishant/Documents/6th sem/CS305/Final/Main Folder/server/test/email.test.js",
          "file": "/test/email.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "e6d38774-8a6b-49e5-816a-546580c5c0ba",
              "title": "sendMail",
              "fullFile": "/home/nishant/Documents/6th sem/CS305/Final/Main Folder/server/test/email.test.js",
              "file": "/test/email.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"sendMail\"",
                  "fullTitle": "Email sendMail \"before each\" hook in \"sendMail\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "transporter = nodemailer.createTransport(nodemailerMock());\nemail = new Email();\nemail.transporter = transporter;\nemail.sender = \"test92.test@gmail.com\";",
                  "err": {},
                  "uuid": "314163cf-70f1-4668-8bdb-14838bb77839",
                  "parentUUID": "e6d38774-8a6b-49e5-816a-546580c5c0ba",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [
                {
                  "title": "\"after each\" hook in \"sendMail\"",
                  "fullTitle": "Email sendMail \"after each\" hook in \"sendMail\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "sinon.restore();",
                  "err": {},
                  "uuid": "2bf3dd77-526d-4c29-a2b1-a014bbf8ba1d",
                  "parentUUID": "e6d38774-8a6b-49e5-816a-546580c5c0ba",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [
                {
                  "title": "should send an email",
                  "fullTitle": "Email sendMail should send an email",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// to track the sendMail function of the email.transporter\nconst sendMailSpy = sinon.spy(email.transporter, \"sendMail\");\nconst receiver = \"nish95.sha@gmail.com\";\nconst subject = \"Test Email\";\nconst text = \"This is a test email.\";\n// call the sendMail function of the email class\nemail.sendMail(receiver, subject, text);\nexpect(sendMailSpy.calledOnce).to.be.true;\nexpect(sendMailSpy.firstCall.args[0]).to.deep.equal({\n  from: email.sender,\n  to: receiver,\n  subject: subject,\n  text: text,\n});",
                  "err": {},
                  "uuid": "e24ea218-face-4017-8791-0814cc9a86aa",
                  "parentUUID": "e6d38774-8a6b-49e5-816a-546580c5c0ba",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw the error if the email fails to send",
                  "fullTitle": "Email sendMail should throw the error if the email fails to send",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// mock the sendMail function of the email.transporter\nemail.transporter.sendMail = sinon\n  .stub()\n  .yields(\"Failed to send email.\");\n  // to call the callback function of the sendMail function with the error message\nconst receiver = \"recipient@example.com\";\nconst subject = \"Test email\";\nconst text = \"This is a test email.\";\nconst errorMessage = \"Failed to send email.\";\nexpect(() => {\n  email.sendMail(receiver, subject, text);\n}).to.throw(Error, errorMessage);",
                  "err": {},
                  "uuid": "8a8dcb39-f6ca-4790-a517-65347d99a05d",
                  "parentUUID": "e6d38774-8a6b-49e5-816a-546580c5c0ba",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e24ea218-face-4017-8791-0814cc9a86aa",
                "8a8dcb39-f6ca-4790-a517-65347d99a05d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 9,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "5808e762-9012-4281-b3bb-74c5ff54147b",
              "title": "sendOTP",
              "fullFile": "/home/nishant/Documents/6th sem/CS305/Final/Main Folder/server/test/email.test.js",
              "file": "/test/email.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"sendOTP\"",
                  "fullTitle": "Email sendOTP \"before each\" hook in \"sendOTP\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "transporter = nodemailer.createTransport(nodemailerMock());\nemail = new Email();\nemail.transporter = transporter;\nemail.sender = \"test92.test@gmail.com\";\nemail.sendMail = sinon.stub().resolves();",
                  "err": {},
                  "uuid": "f369c1d7-26ee-43fc-bfc4-fa8eb3af634d",
                  "parentUUID": "5808e762-9012-4281-b3bb-74c5ff54147b",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [
                {
                  "title": "\"after each\" hook in \"sendOTP\"",
                  "fullTitle": "Email sendOTP \"after each\" hook in \"sendOTP\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "sinon.restore();",
                  "err": {},
                  "uuid": "4aac5606-7c10-439c-9d47-97f9dff7b855",
                  "parentUUID": "5808e762-9012-4281-b3bb-74c5ff54147b",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [
                {
                  "title": "should send an OTP",
                  "fullTitle": "Email sendOTP should send an OTP",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const receiver = \"nish95.sha@gmail.com\";\nconst otp = \"123456\";\nemail.sendOTP(receiver, otp);\nexpect(\n  email.sendMail.calledOnceWithExactly(\n    receiver,\n    \"OTP\",\n    `Your OTP is ${otp}`\n  )\n).to.be.true;",
                  "err": {},
                  "uuid": "77acb208-0d62-44d8-a895-762bf63634e0",
                  "parentUUID": "5808e762-9012-4281-b3bb-74c5ff54147b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "77acb208-0d62-44d8-a895-762bf63634e0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "b078f8e1-7064-459a-aff4-83ad74e07bae",
          "title": "Problems",
          "fullFile": "/home/nishant/Documents/6th sem/CS305/Final/Main Folder/server/test/problem.test.js",
          "file": "/test/problem.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "44c4125b-7d46-4960-9eaa-44d1b1e8c41b",
              "title": "handleCPP",
              "fullFile": "/home/nishant/Documents/6th sem/CS305/Final/Main Folder/server/test/problem.test.js",
              "file": "/test/problem.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"handleCPP\"",
                  "fullTitle": "Problems handleCPP \"before each\" hook in \"handleCPP\"",
                  "timedOut": false,
                  "duration": 1,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "res = {\n  send: sinon.stub(),\n};\nadminDB = {\n  findOne: sinon.stub(),\n  insertOne: sinon.stub(),\n  updateOne: sinon.stub(),\n};\ntestProblem = new Problem(adminDB, {});\nproblemId = \"644bc03d00e76ef0f3d3137f\";\ncode = `int sum(int a, int b) {return a+b;}`;\nlanguage = \"C++\";\nhandle = \"testHandle\";\ntimestamp = \"timastamp\";",
                  "err": {},
                  "uuid": "ed9c3e73-c196-4b5c-94b3-62bbb1ec1d20",
                  "parentUUID": "44c4125b-7d46-4960-9eaa-44d1b1e8c41b",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return accept for correct solution",
                  "fullTitle": "Problems handleCPP should return accept for correct solution",
                  "timedOut": false,
                  "duration": 9002,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(0);\nsetTimeout(done, 9000);\nadminDB.findOne.onFirstCall().returns({\n  _id: new ObjectId(\"644bc03d00e76ef0f3d3137f\"),\n  author_handle: \"nishant_89\",\n  title: \"Add numbers in an array\",\n  content: \"Add numbers in an array\",\n  correct_code_CPP:\n    \"#include <bits/stdc++.h>\\n\" +\n    \"using namespace std;\\n\" +\n    \"int sum(int a,int b){\\n\" +\n    \"    return a+b;\\n\" +\n    \"}\\n\" +\n    \"int main(){\\n\" +\n    '    freopen(\"input.txt\", \"r\", stdin);                   \\n' +\n    '\\tfreopen(\"coutput.txt\", \"w\", stdout);\\n' +\n    \"\\n\" +\n    \"    int t;\\n\" +\n    \"cin>>t;\\n\" +\n    \"while(t--){\\n\" +\n    \"\\t int a,b;\\n\" +\n    \"    cin>>a>>b;\\n\" +\n    '    cout<<sum(a,b)<<\"\\\\n\";\\n' +\n    \"}\\n\" +\n    \"   \\n\" +\n    \"    return 0;\\n\" +\n    \"}\",\n  correct_code_JAVA:\n    \"import java.io.*;\\n\" +\n    \"\\n\" +\n    \"public class CorrectCode {\\n\" +\n    \"    public static void main(String[] args) {\\n\" +\n    \"        try {\\n\" +\n    \"            // Open input and output files\\n\" +\n    '            BufferedReader reader = new BufferedReader(new FileReader(\"input.txt\"));\\n' +\n    '            BufferedWriter writer = new BufferedWriter(new FileWriter(\"coutput.txt\"));\\n' +\n    \"\\n\" +\n    \"\\t\\t// Read first number from input file\\n\" +\n    \"            String line = reader.readLine();\\n\" +\n    \"            int t = Integer.parseInt(line);\\n\" +\n    \"\\n\" +\n    \"\\t\\twhile(t>0){\\n\" +\n    \"\\t\\t\\tString input = reader.readLine();\\n\" +\n    '\\t\\t\\tString[] inputArray = input.split(\" \"); // splits the input by space\\n' +\n    \"        \\t\\tint num1 = Integer.parseInt(inputArray[0]); // converts the first number to an integer\\n\" +\n    \"        \\t\\tint num2 = Integer.parseInt(inputArray[1]); \\n\" +\n    \"            \\n\" +\n    '            \\twriter.write(num1+num2+\"\\\\n\");\\n' +\n    \"            \\n\" +\n    \"            \\t// Close input and output files\\n\" +\n    \"\\t\\t\\tt--;\\n\" +\n    \"\\t\\t}\\n\" +\n    \"\\t\\treader.close();\\n\" +\n    \"            writer.close();\\n\" +\n    \"            \\n\" +\n    \"            \\n\" +\n    \"            \\n\" +\n    \"        } catch (IOException e) {\\n\" +\n    \"            e.printStackTrace();\\n\" +\n    \"        }\\n\" +\n    \"    }\\n\" +\n    \"}\",\n  time_limit: 1,\n  input_format: \"input\",\n  output_format: \"output\",\n  example_input: \"sample_input\",\n  example_output: \"sample_output\",\n  function_def_CPP: \"int sum(int a,int b){\\n}\",\n  input_template_CPP:\n    \"#include <bits/stdc++.h>\\n\" +\n    \"using namespace std;\\n\" +\n    '#include \"funcDef.h\"\\n' +\n    \"int main(){\\n\" +\n    '    freopen(\"input.txt\", \"r\", stdin);                   \\n' +\n    '\\tfreopen(\"output.txt\", \"w\", stdout);\\n' +\n    \"\\t\\n\" +\n    \"    int t;\\n\" +\n    \"    cin>>t;\\n\" +\n    \"    while(t--){\\n\" +\n    \"\\tint a,b;\\n\" +\n    \"    cin>>a>>b;\\n\" +\n    '    cout<<sum(a,b)<<\"\\\\n\";\\n' +\n    \"    }\\n\" +\n    \"\\n\" +\n    \"    \\n\" +\n    \"    return 0;\\n\" +\n    \"}\",\n  function_def_JAVA:\n    \"public class Solution {\\n\" +\n    \"    public static int add(int a, int b) {\\n\" +\n    \"        // Write your code here.\\n\" +\n    \"    }\\n\" +\n    \"}\",\n  input_template_JAVA:\n    \"import java.io.*;\\n\" +\n    \"\\n\" +\n    \"public class Func {\\n\" +\n    \"    public static void main(String[] args) {\\n\" +\n    \"        try {\\n\" +\n    \"            // Open input and output files\\n\" +\n    '            BufferedReader reader = new BufferedReader(new FileReader(\"input.txt\"));\\n' +\n    '            BufferedWriter writer = new BufferedWriter(new FileWriter(\"output.txt\"));\\n' +\n    \"\\n\" +\n    \"\\t\\t// Read first number from input file\\n\" +\n    \"            String line = reader.readLine();\\n\" +\n    \"            int t = Integer.parseInt(line);\\n\" +\n    \"\\n\" +\n    \"\\t\\twhile(t>0){\\n\" +\n    \"\\t\\t\\tString input = reader.readLine();\\n\" +\n    '\\t\\t\\tString[] inputArray = input.split(\" \"); // splits the input by space\\n' +\n    \"        \\t\\tint num1 = Integer.parseInt(inputArray[0]); // converts the first number to an integer\\n\" +\n    \"        \\t\\tint num2 = Integer.parseInt(inputArray[1]); \\n\" +\n    \"            \\n\" +\n    '            \\twriter.write(Solution.add(num1,num2)+\"\\\\n\");\\n' +\n    \"\\t\\t\\tt--;\\n\" +\n    \"            \\n\" +\n    \"\\t\\t}\\n\" +\n    \"\\t\\t// Close input and output files\\n\" +\n    \"            \\treader.close();\\n\" +\n    \"            \\twriter.close();\\n\" +\n    \"            \\n\" +\n    \"            \\n\" +\n    \"            \\n\" +\n    \"        } catch (IOException e) {\\n\" +\n    \"            e.printStackTrace();\\n\" +\n    \"        }\\n\" +\n    \"    }\\n\" +\n    \"}\",\n  testcases: \"5\\n1 3\\n4 6\\n2 0\\n1 -1\\n2 3\",\n  timestamp: \"2023-04-28T11:21:23.840Z\",\n  tags: [\"a\", \"b\"],\n  level: \"medium\",\n});\nadminDB.findOne.onSecondCall().returns({ problems: [] });\nadminDB.insertOne.returns({});\nadminDB.updateOne.returns({});\ntestProblem.handleCPP(problemId, handle, code, timestamp, language, res);\n// setTimeout(() => {\n//   expect(adminDB.findOne.callCount).to.equal(2);\n// }, 9000);",
                  "err": {},
                  "uuid": "3302c91f-a424-4419-8b2d-6667bcd426ba",
                  "parentUUID": "44c4125b-7d46-4960-9eaa-44d1b1e8c41b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3302c91f-a424-4419-8b2d-6667bcd426ba"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 9002,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "731e6559-5282-42f1-ab3e-286e7c73b765",
              "title": "handleJAVA",
              "fullFile": "/home/nishant/Documents/6th sem/CS305/Final/Main Folder/server/test/problem.test.js",
              "file": "/test/problem.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"handleJAVA\"",
                  "fullTitle": "Problems handleJAVA \"before each\" hook in \"handleJAVA\"",
                  "timedOut": false,
                  "duration": 2,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "res = {\n  send: sinon.stub(),\n};\nadminDB = {\n  findOne: sinon.stub(),\n  insertOne: sinon.stub(),\n  updateOne: sinon.stub(),\n};\ntestProblem = new Problem(adminDB, {});\nproblemId = \"644bc03d00e76ef0f3d3137f\";\ncode = `public class Solution {public static int add(int a, int b) {return a+b;}}`;\nlanguage = \"Java\";\nhandle = \"testHandle\";\ntimestamp = \"timastamp\";",
                  "err": {},
                  "uuid": "8519f627-2696-4c41-866b-b0ca7b968693",
                  "parentUUID": "731e6559-5282-42f1-ab3e-286e7c73b765",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return accept for correct solution",
                  "fullTitle": "Problems handleJAVA should return accept for correct solution",
                  "timedOut": false,
                  "duration": 10000,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(0);\nsetTimeout(done, 10000);\nadminDB.findOne.onFirstCall().returns({\n  _id: new ObjectId(\"644bc03d00e76ef0f3d3137f\"),\n  author_handle: \"nishant_89\",\n  title: \"Add numbers in an array\",\n  content: \"Add numbers in an array\",\n  correct_code_CPP:\n    \"#include <bits/stdc++.h>\\n\" +\n    \"using namespace std;\\n\" +\n    \"int sum(int a,int b){\\n\" +\n    \"    return a+b;\\n\" +\n    \"}\\n\" +\n    \"int main(){\\n\" +\n    '    freopen(\"input.txt\", \"r\", stdin);                   \\n' +\n    '\\tfreopen(\"coutput.txt\", \"w\", stdout);\\n' +\n    \"\\n\" +\n    \"    int t;\\n\" +\n    \"cin>>t;\\n\" +\n    \"while(t--){\\n\" +\n    \"\\t int a,b;\\n\" +\n    \"    cin>>a>>b;\\n\" +\n    '    cout<<sum(a,b)<<\"\\\\n\";\\n' +\n    \"}\\n\" +\n    \"   \\n\" +\n    \"    return 0;\\n\" +\n    \"}\",\n  correct_code_JAVA:\n    \"import java.io.*;\\n\" +\n    \"\\n\" +\n    \"public class CorrectCode {\\n\" +\n    \"    public static void main(String[] args) {\\n\" +\n    \"        try {\\n\" +\n    \"            // Open input and output files\\n\" +\n    '            BufferedReader reader = new BufferedReader(new FileReader(\"input.txt\"));\\n' +\n    '            BufferedWriter writer = new BufferedWriter(new FileWriter(\"coutput.txt\"));\\n' +\n    \"\\n\" +\n    \"\\t\\t// Read first number from input file\\n\" +\n    \"            String line = reader.readLine();\\n\" +\n    \"            int t = Integer.parseInt(line);\\n\" +\n    \"\\n\" +\n    \"\\t\\twhile(t>0){\\n\" +\n    \"\\t\\t\\tString input = reader.readLine();\\n\" +\n    '\\t\\t\\tString[] inputArray = input.split(\" \"); // splits the input by space\\n' +\n    \"        \\t\\tint num1 = Integer.parseInt(inputArray[0]); // converts the first number to an integer\\n\" +\n    \"        \\t\\tint num2 = Integer.parseInt(inputArray[1]); \\n\" +\n    \"            \\n\" +\n    '            \\twriter.write(num1+num2+\"\\\\n\");\\n' +\n    \"            \\n\" +\n    \"            \\t// Close input and output files\\n\" +\n    \"\\t\\t\\tt--;\\n\" +\n    \"\\t\\t}\\n\" +\n    \"\\t\\treader.close();\\n\" +\n    \"            writer.close();\\n\" +\n    \"            \\n\" +\n    \"            \\n\" +\n    \"            \\n\" +\n    \"        } catch (IOException e) {\\n\" +\n    \"            e.printStackTrace();\\n\" +\n    \"        }\\n\" +\n    \"    }\\n\" +\n    \"}\",\n  time_limit: 1,\n  input_format: \"input\",\n  output_format: \"output\",\n  example_input: \"sample_input\",\n  example_output: \"sample_output\",\n  function_def_CPP: \"int sum(int a,int b){\\n}\",\n  input_template_CPP:\n    \"#include <bits/stdc++.h>\\n\" +\n    \"using namespace std;\\n\" +\n    '#include \"funcDef.h\"\\n' +\n    \"int main(){\\n\" +\n    '    freopen(\"input.txt\", \"r\", stdin);                   \\n' +\n    '\\tfreopen(\"output.txt\", \"w\", stdout);\\n' +\n    \"\\t\\n\" +\n    \"    int t;\\n\" +\n    \"    cin>>t;\\n\" +\n    \"    while(t--){\\n\" +\n    \"\\tint a,b;\\n\" +\n    \"    cin>>a>>b;\\n\" +\n    '    cout<<sum(a,b)<<\"\\\\n\";\\n' +\n    \"    }\\n\" +\n    \"\\n\" +\n    \"    \\n\" +\n    \"    return 0;\\n\" +\n    \"}\",\n  function_def_JAVA:\n    \"public class Solution {\\n\" +\n    \"    public static int add(int a, int b) {\\n\" +\n    \"        // Write your code here.\\n\" +\n    \"    }\\n\" +\n    \"}\",\n  input_template_JAVA:\n    \"import java.io.*;\\n\" +\n    \"\\n\" +\n    \"public class Func {\\n\" +\n    \"    public static void main(String[] args) {\\n\" +\n    \"        try {\\n\" +\n    \"            // Open input and output files\\n\" +\n    '            BufferedReader reader = new BufferedReader(new FileReader(\"input.txt\"));\\n' +\n    '            BufferedWriter writer = new BufferedWriter(new FileWriter(\"output.txt\"));\\n' +\n    \"\\n\" +\n    \"\\t\\t// Read first number from input file\\n\" +\n    \"            String line = reader.readLine();\\n\" +\n    \"            int t = Integer.parseInt(line);\\n\" +\n    \"\\n\" +\n    \"\\t\\twhile(t>0){\\n\" +\n    \"\\t\\t\\tString input = reader.readLine();\\n\" +\n    '\\t\\t\\tString[] inputArray = input.split(\" \"); // splits the input by space\\n' +\n    \"        \\t\\tint num1 = Integer.parseInt(inputArray[0]); // converts the first number to an integer\\n\" +\n    \"        \\t\\tint num2 = Integer.parseInt(inputArray[1]); \\n\" +\n    \"            \\n\" +\n    '            \\twriter.write(Solution.add(num1,num2)+\"\\\\n\");\\n' +\n    \"\\t\\t\\tt--;\\n\" +\n    \"            \\n\" +\n    \"\\t\\t}\\n\" +\n    \"\\t\\t// Close input and output files\\n\" +\n    \"            \\treader.close();\\n\" +\n    \"            \\twriter.close();\\n\" +\n    \"            \\n\" +\n    \"            \\n\" +\n    \"            \\n\" +\n    \"        } catch (IOException e) {\\n\" +\n    \"            e.printStackTrace();\\n\" +\n    \"        }\\n\" +\n    \"    }\\n\" +\n    \"}\",\n  testcases: \"5\\n1 3\\n4 6\\n2 0\\n1 -1\\n2 3\",\n  timestamp: \"2023-04-28T11:21:23.840Z\",\n  tags: [\"a\", \"b\"],\n  level: \"medium\",\n});\nadminDB.findOne.onSecondCall().returns({ problems: [] });\nadminDB.insertOne.returns({});\nadminDB.updateOne.returns({});\ntestProblem.handleJAVA(problemId, handle, code, timestamp, language, res);\n// setTimeout(() => {\n//   expect(adminDB.findOne.callCount).to.equal(2);\n// }, 9000);",
                  "err": {},
                  "uuid": "a19dea3d-1301-470d-8668-dab55c65bf51",
                  "parentUUID": "731e6559-5282-42f1-ab3e-286e7c73b765",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a19dea3d-1301-470d-8668-dab55c65bf51"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 10000,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "9f79e58d-e549-4bde-885c-5a7305d60900",
              "title": "postProblem",
              "fullFile": "/home/nishant/Documents/6th sem/CS305/Final/Main Folder/server/test/problem.test.js",
              "file": "/test/problem.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"postProblem\"",
                  "fullTitle": "Problems postProblem \"before each\" hook in \"postProblem\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Create stubs for adminJWT and adminDB\nadminJWT = {\n  verifyToken: sinon.stub().returns({ handle: 'admin', type: '2' }),\n};\nadminDB = {\n  insertOne: sinon.stub().returns(true),\n  problem: 'problemCollection',\n};\n  \n// Create a fake response object with a send function\nres = {\n  send: sinon.stub(),\n};\npostProblem = new Problem(adminDB,adminJWT).postProblem;",
                  "err": {},
                  "uuid": "2b009ed0-dc96-4a87-aeee-8ed478a8760c",
                  "parentUUID": "9f79e58d-e549-4bde-885c-5a7305d60900",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should post a problem successfully",
                  "fullTitle": "Problems postProblem should post a problem successfully",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Mock the request object with necessary properties\nconst req = {\n  body: {\n    userToken: 'fakeToken',\n    // other properties required by the function\n  },\n};\n  \n  \n// Call the function\nawait postProblem(req, res, adminJWT, adminDB);\n  \n// Verify the expected behavior\n  \n// Verify that adminJWT.verifyToken is called with the correct arguments\nexpect(adminJWT.verifyToken.calledOnce).to.be.true;\nexpect(adminJWT.verifyToken.calledWith('fakeToken')).to.be.true;\n  \n// Verify that adminDB.insertOne is called with the correct arguments\nexpect(adminDB.insertOne.calledOnce).to.be.true;\nexpect(adminDB.insertOne.calledWith(adminDB.problem, sinon.match.any)).to.be.true;\n  \n// Verify that res.send is called with the correct success message\nexpect(res.send.calledOnce).to.be.true;\nexpect(res.send.calledWith({ success: true, message: 'Problem posted successfully.' })).to.be.true;",
                  "err": {},
                  "uuid": "59f3cf14-773d-4238-8f36-2004628fdcdc",
                  "parentUUID": "9f79e58d-e549-4bde-885c-5a7305d60900",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return an error message if the user is not authorized",
                  "fullTitle": "Problems postProblem should return an error message if the user is not authorized",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Mock the request object with necessary properties\nconst req = {\n  body: {\n    userToken: 'fakeToken',\n    // other properties required by the function\n  },\n};\n  \n// Modify the stub for adminJWT to return a different user type\nadminJWT.verifyToken.returns({ handle: 'user', type: '1' });\n  \n// Import the function to be tested here and pass the stubs and mocks\n  \n// Call the function\nawait postProblem(req, res, adminJWT, adminDB);\n  \n// Verify the expected behavior\n  \n// Verify that adminJWT.verifyToken is called with the correct arguments\nexpect(adminJWT.verifyToken.calledOnce).to.be.true;\nexpect(adminJWT.verifyToken.calledWith('fakeToken')).to.be.true;\n  \n// Verify that adminDB.insertOne is not called\nexpect(adminDB.insertOne.notCalled).to.be.true;\n  \n// Verify that res.send is called with the correct error message\nexpect(res.send.calledOnce).to.be.true;\nexpect(res.send.calledWith({\n  success: false,\n  message: 'You are not authorized to post problems.',\n})).to.be.true;",
                  "err": {},
                  "uuid": "7b62aefb-3d17-47a2-a947-637b9c22f7f2",
                  "parentUUID": "9f79e58d-e549-4bde-885c-5a7305d60900",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle token expiration error",
                  "fullTitle": "Problems postProblem should handle token expiration error",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Mock the request object with necessary properties\nconst req = {\n  body: {\n    userToken: 'expiredToken',\n    // other properties required by the function\n  },\n};\n    // Modify the stub for adminJWT to throw a TokenExpiredError\n    adminJWT.verifyToken.throws(new TokenExpiredError('Token expired'));\n\n    // Import the function to be tested here and pass the stubs and mocks\n\n    // Call the function\n    await postProblem(req, res, adminJWT, adminDB);\n\n    // Verify the expected behavior\n\n    // Verify that adminJWT.verifyToken is called with the correct arguments\n    expect(adminJWT.verifyToken.calledOnce).to.be.true;\n    expect(adminJWT.verifyToken.calledWith('expiredToken')).to.be.true;\n\n    // Verify that adminDB.insertOne is not called\n    expect(adminDB.insertOne.notCalled).to.be.true;\n\n    // Verify that res.send is called with the correct error message\n    expect(res.send.calledOnce).to.be.true;\n    expect(res.send.calledWith({ success: false, message: 'Token has expired.' })).to.be.true;",
                  "err": {},
                  "uuid": "b6a0725c-1b85-40ad-bbbe-bb2fde49d309",
                  "parentUUID": "9f79e58d-e549-4bde-885c-5a7305d60900",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle internal server error during problem posting",
                  "fullTitle": "Problems postProblem should handle internal server error during problem posting",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Mock the request object with necessary properties\nconst req = {\n  body: {\n    userToken: 'fakeToken',\n    // other properties required by the function\n  },\n};\n// Modify the stub for adminDB to return false, indicating an internal server error\nadminDB.insertOne.returns(false);\n// Import the function to be tested here and pass the stubs and mocks\n// Call the function\nawait postProblem(req, res, adminJWT, adminDB);\n// Verify the expected behavior\n// Verify that adminJWT.verifyToken is called with the correct arguments\nexpect(adminJWT.verifyToken.calledOnce).to.be.true;\nexpect(adminJWT.verifyToken.calledWith('fakeToken')).to.be.true;\n// Verify that adminDB.insertOne is called with the correct arguments\nexpect(adminDB.insertOne.calledOnce).to.be.true;\nexpect(adminDB.insertOne.calledWith(adminDB.problem, sinon.match.any)).to.be.true;\n// Verify that res.send is called with the correct error message\nexpect(res.send.calledOnce).to.be.true;\nexpect(res.send.calledWith({\n  success: false,\n  message: 'Problem can\\'t be posted due to internal reasons',\n})).to.be.true;",
                  "err": {},
                  "uuid": "8a636f3a-48fc-40e2-b5a4-dfa473eaabcd",
                  "parentUUID": "9f79e58d-e549-4bde-885c-5a7305d60900",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "59f3cf14-773d-4238-8f36-2004628fdcdc",
                "7b62aefb-3d17-47a2-a947-637b9c22f7f2",
                "b6a0725c-1b85-40ad-bbbe-bb2fde49d309",
                "8a636f3a-48fc-40e2-b5a4-dfa473eaabcd"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f16e5023-ced4-4460-87fe-2a51515366c1",
              "title": "fetchSolvedProblems",
              "fullFile": "/home/nishant/Documents/6th sem/CS305/Final/Main Folder/server/test/problem.test.js",
              "file": "/test/problem.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"fetchSolvedProblems\"",
                  "fullTitle": "Problems fetchSolvedProblems \"before each\" hook in \"fetchSolvedProblems\"",
                  "timedOut": false,
                  "duration": 1,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "adminJWT = {\n  verifyToken: sinon.stub().returns({ handle })\n};\n\nreq = { body: { userToken } };\nres = {\n  send: sinon.stub(),\n};\nadminDB = {\n  findOne: sinon.stub().returns({ problems: solvedProblems }),\n  solved: 'solved_collection'\n};\nfetchSolvedProblems = new Problem(adminDB,adminJWT).fetchSolvedProblems;",
                  "err": {},
                  "uuid": "1717ad0e-e030-477f-b8be-dbeeb5f77533",
                  "parentUUID": "f16e5023-ced4-4460-87fe-2a51515366c1",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should fetch solved problems of user from solved collection",
                  "fullTitle": "Problems fetchSolvedProblems should fetch solved problems of user from solved collection",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await fetchSolvedProblems(req, res);\n    expect(adminJWT.verifyToken.calledOnceWith(userToken)).to.be.true;\n    expect(adminDB.findOne.calledOnceWith(adminDB.solved, { handle }, { problems: 1, _id: 0 })).to.be.true;\n    expect(res.send.calledOnceWith({\n      success: true,\n      problems: solvedProblems,\n      message: 'Solved problems fetched successfully'\n    })).to.be.true;",
                  "err": {},
                  "uuid": "a547960f-0cb8-48bb-9de3-db75b7ce826a",
                  "parentUUID": "f16e5023-ced4-4460-87fe-2a51515366c1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should send error message for token expired error",
                  "fullTitle": "Problems fetchSolvedProblems should send error message for token expired error",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "adminJWT.verifyToken= sinon.stub().throws(new TokenExpiredError());\nawait fetchSolvedProblems(req, res);\nexpect(adminJWT.verifyToken.calledOnceWith(userToken)).to.be.true;\nexpect(res.send.calledOnceWith({\n  success: false,\n  message: 'Token has expired.'\n})).to.be.true;",
                  "err": {},
                  "uuid": "f80eaccc-5560-47db-8bda-9112fa8e860b",
                  "parentUUID": "f16e5023-ced4-4460-87fe-2a51515366c1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should send error message for other token errors",
                  "fullTitle": "Problems fetchSolvedProblems should send error message for other token errors",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "adminJWT.verifyToken= sinon.stub().throws(new JsonWebTokenError());\nawait fetchSolvedProblems(req, res);\nexpect(adminJWT.verifyToken.calledOnceWith(userToken)).to.be.true;\nexpect(res.send.calledOnceWith({\n  success: false,\n  message: 'User has logged out.Kindly login again'\n})).to.be.true;",
                  "err": {},
                  "uuid": "6ac8f69e-e900-49d3-be68-bc50f58abce7",
                  "parentUUID": "f16e5023-ced4-4460-87fe-2a51515366c1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should send error message for other errors",
                  "fullTitle": "Problems fetchSolvedProblems should send error message for other errors",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "adminDB.findOne = sinon.stub().throws(new Error('Some error occurred'));    \n  await fetchSolvedProblems(req, res);\n  expect(adminJWT.verifyToken.calledOnceWith(userToken)).to.be.true;\n  expect(adminDB.findOne.calledOnceWith(adminDB.solved, { handle: 'testUser' }, { problems: 1, _id: 0 })).to.be.true;\n  expect(res.send.calledOnceWith({\n  success: false,\n  message: 'Some error occurred'\n  })).to.be.true;",
                  "err": {},
                  "uuid": "9f0e2683-3076-4890-9f82-8bc39e5e70c7",
                  "parentUUID": "f16e5023-ced4-4460-87fe-2a51515366c1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a547960f-0cb8-48bb-9de3-db75b7ce826a",
                "f80eaccc-5560-47db-8bda-9112fa8e860b",
                "6ac8f69e-e900-49d3-be68-bc50f58abce7",
                "9f0e2683-3076-4890-9f82-8bc39e5e70c7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "c01bcd79-fd53-4900-a49f-432a25633d43",
              "title": "fetchAllSubmissions",
              "fullFile": "/home/nishant/Documents/6th sem/CS305/Final/Main Folder/server/test/problem.test.js",
              "file": "/test/problem.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"fetchAllSubmissions\"",
                  "fullTitle": "Problems fetchAllSubmissions \"before each\" hook in \"fetchAllSubmissions\"",
                  "timedOut": false,
                  "duration": 1,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "res = {\n  send: sinon.stub(),\n};\nadminDB = {\n  find: sinon.stub(),\n  problem: \"problemCollection\",\n  solution: \"solutionCollection\",\n}\nadminJWT = {\n  verifyToken: sinon.stub(),\n};\n       fetchAllSubmissions = new Problem(adminDB,adminJWT).fetchAllSubmissions;",
                  "err": {},
                  "uuid": "b66ca6c3-e94e-46e0-b13e-9694579222de",
                  "parentUUID": "c01bcd79-fd53-4900-a49f-432a25633d43",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [
                {
                  "title": "\"after each\" hook in \"fetchAllSubmissions\"",
                  "fullTitle": "Problems fetchAllSubmissions \"after each\" hook in \"fetchAllSubmissions\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "sinon.restore();",
                  "err": {},
                  "uuid": "b5eb379e-b44f-412e-97f4-6e569c008a11",
                  "parentUUID": "c01bcd79-fd53-4900-a49f-432a25633d43",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [
                {
                  "title": "should return submissions for a valid token",
                  "fullTitle": "Problems fetchAllSubmissions should return submissions for a valid token",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "adminJWT.verifyToken.returns({\n    handle: handle,\n  });\n  const data = [\n    {\n      _id: new ObjectId(),\n      problemId: new ObjectId(),\n      handle: \"testHandle\",\n      code: \"testCode\",\n      timestamp: \"testTimestamp\",\n      language: \"testLanguage\",\n    },\n  ];\n  adminDB.find.withArgs(adminDB.solution, { handle: handle }).returns(data);\n  const problemData = [\n    {\n      _id: data[0].problemId,\n      title: \"testTitle\",\n    },\n  ];\n  adminDB.find.withArgs(adminDB.problem, { _id: { $in: [data[0].problemId] } }, {}, { title: 1 })\n    .returns(problemData);\n    \n  await fetchAllSubmissions(req, res);\n    \n  expect(res.send.calledOnce).to.be.true;\n  expect(res.send.firstCall.args[0]).to.deep.equal({\n    success: true,\n    submissions: [\n      {\n        ...data[0],\n        title: problemData[0].title,\n      },\n    ],\n    message: \"Submissions fetched successfully\",\n  });",
                  "err": {},
                  "uuid": "ce908106-1b3f-4c35-a719-474c10d87e63",
                  "parentUUID": "c01bcd79-fd53-4900-a49f-432a25633d43",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return an error message for an invalid token",
                  "fullTitle": "Problems fetchAllSubmissions should return an error message for an invalid token",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const error = new JsonWebTokenError(\"invalid token\");\nadminJWT.verifyToken = sinon.stub().throws(error);\n    \nawait fetchAllSubmissions(req, res);\n    \nexpect(res.send.calledOnce).to.be.true;\nexpect(res.send.firstCall.args[0]).to.deep.equal({\n  success: false,\n  message: \"User has logged out.Kindly login again\",\n});",
                  "err": {},
                  "uuid": "4e77f294-0585-45ba-a1a8-5ff3bc166e94",
                  "parentUUID": "c01bcd79-fd53-4900-a49f-432a25633d43",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return an error message for an expired token",
                  "fullTitle": "Problems fetchAllSubmissions should return an error message for an expired token",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const error = new TokenExpiredError(\"expired token\");\nadminJWT.verifyToken = sinon.stub().throws(error);\n    \nawait fetchAllSubmissions(req, res);\n    \nexpect(res.send.calledOnce).to.be.true;\nexpect(res.send.firstCall.args[0]).to.deep.equal({\n  success: false,\n  message: \"Token has expired.\",\n});",
                  "err": {},
                  "uuid": "9376a650-74ae-4acc-b20e-989a35ffe7e8",
                  "parentUUID": "c01bcd79-fd53-4900-a49f-432a25633d43",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return an error message for any other errors",
                  "fullTitle": "Problems fetchAllSubmissions should return an error message for any other errors",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const error = new Error(\"unknown error\");\nadminDB.find = sinon.stub().throws(error);\nadminJWT.verifyToken.returns({\n  handle: handle,\n});\nawait fetchAllSubmissions(req, res);\n    \nexpect(res.send.calledOnce).to.be.true;\nexpect(res.send.firstCall.args[0]).to.deep.equal({\n  success: false,\n  message: error.message,\n});",
                  "err": {},
                  "uuid": "a0b5eed9-5f08-4c8f-aebf-144e78e1b621",
                  "parentUUID": "c01bcd79-fd53-4900-a49f-432a25633d43",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ce908106-1b3f-4c35-a719-474c10d87e63",
                "4e77f294-0585-45ba-a1a8-5ff3bc166e94",
                "9376a650-74ae-4acc-b20e-989a35ffe7e8",
                "a0b5eed9-5f08-4c8f-aebf-144e78e1b621"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 10,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "4416a2c2-b3c6-47d6-99f9-8c33696bfd75",
              "title": "fetchProblemDetails",
              "fullFile": "/home/nishant/Documents/6th sem/CS305/Final/Main Folder/server/test/problem.test.js",
              "file": "/test/problem.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"fetchProblemDetails\"",
                  "fullTitle": "Problems fetchProblemDetails \"before each\" hook in \"fetchProblemDetails\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "adminDB = {\n  findOne: sinon.stub(),\n  problem: \"problemCollection\",\n};\n    \nreq = {\n  body: {\n    problemId: \"someProblemI\",\n  },\n};\n    \nres = {\n  send: sinon.stub(),\n};\nfetchProblemDetails = new Problem(adminDB,{}).fetchProblemDetails;",
                  "err": {},
                  "uuid": "6c140697-6928-4c7e-bd77-577d3305a169",
                  "parentUUID": "4416a2c2-b3c6-47d6-99f9-8c33696bfd75",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return problem details when valid problemId is provided",
                  "fullTitle": "Problems fetchProblemDetails should return problem details when valid problemId is provided",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expectedData = { problem: \"data\" };\nadminDB.findOne.resolves(expectedData);\n    \nawait fetchProblemDetails(req, res, adminDB);\n    \nsinon.assert.calledWith(\n  adminDB.findOne,\n  \"problemCollection\",\n  { _id: new ObjectId(\"someProblemI\") },\n  { _id: 0, correct_code_CPP: 0, correct_code_JAVA: 0, testcases: 0 }\n);\n    \nsinon.assert.calledWith(res.send, {\n  success: true,\n  problem: expectedData,\n  message: \"Problem details fetched successfully\",\n});",
                  "err": {},
                  "uuid": "1a9384c2-f19c-4f61-a050-99ab447a88f4",
                  "parentUUID": "4416a2c2-b3c6-47d6-99f9-8c33696bfd75",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return an error message when an error occurs while fetching the problem details",
                  "fullTitle": "Problems fetchProblemDetails should return an error message when an error occurs while fetching the problem details",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expectedError = new Error(\"Some error occurred\");\nadminDB.findOne.rejects(expectedError);\n    \nawait fetchProblemDetails(req, res, adminDB);\n    \nsinon.assert.calledWith(res.send, {\n  success: false,\n  message: expectedError.message,\n});",
                  "err": {},
                  "uuid": "73a73d3c-7522-4426-88fd-4db571d32e93",
                  "parentUUID": "4416a2c2-b3c6-47d6-99f9-8c33696bfd75",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1a9384c2-f19c-4f61-a050-99ab447a88f4",
                "73a73d3c-7522-4426-88fd-4db571d32e93"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "7f83623a-4db4-4829-8336-2356c01d93f7",
              "title": "fetchAllProblems",
              "fullFile": "/home/nishant/Documents/6th sem/CS305/Final/Main Folder/server/test/problem.test.js",
              "file": "/test/problem.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"fetchAllProblems\"",
                  "fullTitle": "Problems fetchAllProblems \"before each\" hook in \"fetchAllProblems\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "adminDB = {\n  find: sinon.stub(),\n};\nreq = {};\nres = {\n  send: sinon.spy(),\n};\nfetchAllProblems = new Problem(adminDB,{}).fetchAllProblems;",
                  "err": {},
                  "uuid": "d34c0902-63e5-4adf-910a-922d3b500736",
                  "parentUUID": "7f83623a-4db4-4829-8336-2356c01d93f7",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should fetch all problems from the problem collection",
                  "fullTitle": "Problems fetchAllProblems should fetch all problems from the problem collection",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const data = [{ title: 'Problem 1', timestamp: 1234567890 }];\nadminDB.find.returns(data)\n    \nawait fetchAllProblems(req, res);\n    \nexpect(res.send.calledOnce).to.be.true;\nexpect(res.send.firstCall.args[0]).to.deep.equal({\n  success: true,\n  problems: data,\n  message: 'Problems fetched successfully',\n});",
                  "err": {},
                  "uuid": "c2f276a3-b0ec-4f8d-98e7-33f44d013f59",
                  "parentUUID": "7f83623a-4db4-4829-8336-2356c01d93f7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle errors",
                  "fullTitle": "Problems fetchAllProblems should handle errors",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const errorMessage = 'Error fetching problems';\nadminDB.find = sinon.stub().throws(new Error(errorMessage));\n    \nawait fetchAllProblems(req, res);\n    \nexpect(res.send.calledOnce).to.be.true;\nexpect(res.send.firstCall.args[0]).to.deep.equal({\n  success: false,\n  message: errorMessage,\n});",
                  "err": {},
                  "uuid": "05e52761-4564-4848-8b41-9199bff5b345",
                  "parentUUID": "7f83623a-4db4-4829-8336-2356c01d93f7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c2f276a3-b0ec-4f8d-98e7-33f44d013f59",
                "05e52761-4564-4848-8b41-9199bff5b345"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "f252c517-b392-4c2b-bebe-0633e5489032",
          "title": "User",
          "fullFile": "/home/nishant/Documents/6th sem/CS305/Final/Main Folder/server/test/user.test.js",
          "file": "/test/user.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "f620dfc9-761b-4ace-acac-89b59c778417",
              "title": "userLogin",
              "fullFile": "/home/nishant/Documents/6th sem/CS305/Final/Main Folder/server/test/user.test.js",
              "file": "/test/user.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"userLogin\"",
                  "fullTitle": "User userLogin \"before each\" hook in \"userLogin\"",
                  "timedOut": false,
                  "duration": 1,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "adminDB = {\n  users: \"users\",\n  findOne: stub(),\n};\nadminJWT = {\n  createToken: stub(),\n};\nreq = {\n  body: {\n    email: email,\n    password: password,\n  },\n};\nres = {\n  send: stub(),\n};\nuser = new User(adminDB, adminJWT);",
                  "err": {},
                  "uuid": "796afca3-018e-4afd-b608-b4bbd181b837",
                  "parentUUID": "f620dfc9-761b-4ace-acac-89b59c778417",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [
                {
                  "title": "\"after each\" hook in \"userLogin\"",
                  "fullTitle": "User userLogin \"after each\" hook in \"userLogin\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "restore();",
                  "err": {},
                  "uuid": "900dea94-827f-4309-b915-7e821ac35463",
                  "parentUUID": "f620dfc9-761b-4ace-acac-89b59c778417",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [
                {
                  "title": "should send success response if login is successful",
                  "fullTitle": "User userLogin should send success response if login is successful",
                  "timedOut": false,
                  "duration": 131,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const hashedPassword = bcrypt.hashSync(req.body.password, 10);\nadminDB.findOne.resolves({\n  email: req.body.email,\n  password: hashedPassword,\n  type: type,\n  handle: handle,\n});\nstub(bcrypt, \"compare\").callsFake((_password, hash, callback) => {\n  callback(null, bcrypt.compareSync(_password, hash));\n});\nadminJWT.createToken.returns(\"mockToken\");\nawait user.userLogin(req, res);\nexpect(\n  adminDB.findOne.calledOnceWithExactly(\n    adminDB.users,\n    { email: email },\n    {\n      password: 1,\n      type: 1,\n      handle: 1,\n    }\n  )\n).to.be.true;\nexpect(bcrypt.compare.calledOnce).to.be.true;\nexpect(adminJWT.createToken.calledOnceWithExactly(email, handle, type)).to\n  .be.true;\nexpect(res.send.calledOnce).to.be.true;\nexpect(res.send.firstCall.args[0]).to.deep.equal({\n  success: true,\n  message: \"Login Successful\",\n  type: type,\n  userToken: \"mockToken\",\n});",
                  "err": {},
                  "uuid": "8d52786e-3f21-4432-a1a6-8a4b9dd23d8d",
                  "parentUUID": "f620dfc9-761b-4ace-acac-89b59c778417",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should send error response if password does not match",
                  "fullTitle": "User userLogin should send error response if password does not match",
                  "timedOut": false,
                  "duration": 128,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const hashedPassword = bcrypt.hashSync(\"\", 10);\nadminDB.findOne.resolves({\n  email: req.body.email,\n  password: hashedPassword,\n  type: type,\n  handle: handle,\n});\nstub(bcrypt, \"compare\").callsFake((_password, hash, callback) => {\n  callback(null, bcrypt.compareSync(_password, hash));\n});\nawait user.userLogin(req, res);\nexpect(\n  adminDB.findOne.calledOnceWithExactly(\n    adminDB.users,\n    { email: email },\n    {\n      password: 1,\n      type: 1,\n      handle: 1,\n    }\n  )\n).to.be.true;\nexpect(bcrypt.compare.calledOnce).to.be.true;\nexpect(adminJWT.createToken.calledOnceWithExactly(email, handle, type)).to\n  .be.false;\nexpect(res.send.calledOnce).to.be.true;\nexpect(res.send.firstCall.args[0]).to.deep.equal({\n  success: false,\n  message: \"Invalid Email or Password\",\n});",
                  "err": {},
                  "uuid": "ef1545f3-8748-43fe-940e-371789538f85",
                  "parentUUID": "f620dfc9-761b-4ace-acac-89b59c778417",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should send error response if user does not exist",
                  "fullTitle": "User userLogin should send error response if user does not exist",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "adminDB.findOne.resolves(null);\nawait user.userLogin(req, res);\nstub(bcrypt, \"compare\").callsFake((_password, hash, callback) => {\n  callback(null, bcrypt.compareSync(_password, hash));\n});\nexpect(\n  adminDB.findOne.calledOnceWithExactly(\n    adminDB.users,\n    { email: email },\n    {\n      password: 1,\n      type: 1,\n      handle: 1,\n    }\n  )\n).to.be.true;\nexpect(bcrypt.compare.called).to.be.false;\nexpect(adminJWT.createToken.calledOnceWithExactly(email, handle, type)).to\n  .be.false;\nexpect(res.send.calledOnce).to.be.true;\nexpect(res.send.firstCall.args[0]).to.deep.equal({\n  success: false,\n  message: \"Invalid Email or Password\",\n});",
                  "err": {},
                  "uuid": "6a5a3617-e81b-4231-9c72-faaed9bf733f",
                  "parentUUID": "f620dfc9-761b-4ace-acac-89b59c778417",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should send error response if an error occurs",
                  "fullTitle": "User userLogin should send error response if an error occurs",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "adminDB.findOne.rejects(new Error(\"Database error\"));\nstub(bcrypt, \"compare\").callsFake((_password, hash, callback) => {\n  callback(null, bcrypt.compareSync(_password, hash));\n});\nawait user.userLogin(req, res);\nexpect(\n  adminDB.findOne.calledOnceWithExactly(\n    adminDB.users,\n    { email: email },\n    {\n      password: 1,\n      type: 1,\n      handle: 1,\n    }\n  )\n).to.be.true;\nexpect(bcrypt.compare.called).to.be.false;\nexpect(adminJWT.createToken.calledOnceWithExactly(email, handle, type)).to\n  .be.false;\nexpect(res.send.calledOnce).to.be.true;\nexpect(res.send.firstCall.args[0]).to.deep.equal({\n  success: false,\n  message: \"Database error\",\n});",
                  "err": {},
                  "uuid": "08920949-97d7-433b-b7b8-a5dc3b5d933a",
                  "parentUUID": "f620dfc9-761b-4ace-acac-89b59c778417",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8d52786e-3f21-4432-a1a6-8a4b9dd23d8d",
                "ef1545f3-8748-43fe-940e-371789538f85",
                "6a5a3617-e81b-4231-9c72-faaed9bf733f",
                "08920949-97d7-433b-b7b8-a5dc3b5d933a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 261,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "40e91700-ec27-4e33-ad8a-a54c57fe13ad",
              "title": "getUserDetails",
              "fullFile": "/home/nishant/Documents/6th sem/CS305/Final/Main Folder/server/test/user.test.js",
              "file": "/test/user.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"getUserDetails\"",
                  "fullTitle": "User getUserDetails \"before each\" hook in \"getUserDetails\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "adminDB = {\n  users: \"users\",\n  findOne: stub(),\n};\nadminJWT = {\n  verifyToken: stub(),\n};\nreq = {\n  body: {\n    userToken: \"mockToken\",\n  },\n};\nres = {\n  send: stub(),\n};\nuser = new User(adminDB, adminJWT);",
                  "err": {},
                  "uuid": "591173f9-8905-4cd7-9311-f07b5ca08483",
                  "parentUUID": "40e91700-ec27-4e33-ad8a-a54c57fe13ad",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [
                {
                  "title": "\"after each\" hook in \"getUserDetails\"",
                  "fullTitle": "User getUserDetails \"after each\" hook in \"getUserDetails\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "restore();",
                  "err": {},
                  "uuid": "cc766d50-c11a-4cdf-af27-009b22a9559d",
                  "parentUUID": "40e91700-ec27-4e33-ad8a-a54c57fe13ad",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [
                {
                  "title": "should send user details if token is valid and user exists",
                  "fullTitle": "User getUserDetails should send user details if token is valid and user exists",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const decodedToken = {\n  email: email,\n};\nadminJWT.verifyToken.returns(decodedToken);\nadminDB.findOne.resolves({ email: decodedToken.email });\nawait user.getUserDetails(req, res);\nexpect(adminJWT.verifyToken.calledOnceWithExactly(req.body.userToken)).to\n  .be.true;\nexpect(\n  adminDB.findOne.calledOnceWithExactly(\n    adminDB.users,\n    { email: decodedToken.email },\n    { password: 0, _id: 0 }\n  )\n).to.be.true;\nexpect(\n  res.send.calledOnceWithExactly({\n    success: true,\n    message: \"User Details\",\n    user: { email: decodedToken.email },\n  })\n).to.be.true;",
                  "err": {},
                  "uuid": "7990f04d-32e1-4e45-b9c5-5623f950db05",
                  "parentUUID": "40e91700-ec27-4e33-ad8a-a54c57fe13ad",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should send error response if token is expired",
                  "fullTitle": "User getUserDetails should send error response if token is expired",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const tokenExpiredError = new jwt.TokenExpiredError(\"Token has expired\");\nadminJWT.verifyToken.throws(tokenExpiredError);\nawait user.getUserDetails(req, res);\nexpect(adminJWT.verifyToken.calledOnceWithExactly(req.body.userToken)).to\n  .be.true;\nexpect(\n  res.send.calledOnceWithExactly({\n    success: false,\n    message: \"Token has expired.\",\n  })\n).to.be.true;",
                  "err": {},
                  "uuid": "10df71b8-8e12-4890-affb-eea27b576566",
                  "parentUUID": "40e91700-ec27-4e33-ad8a-a54c57fe13ad",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should send error response if token is invalid",
                  "fullTitle": "User getUserDetails should send error response if token is invalid",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const jsonWebTokenError = new jwt.JsonWebTokenError(\"Invalid token\");\nadminJWT.verifyToken.throws(jsonWebTokenError);\nawait user.getUserDetails(req, res);\nexpect(adminJWT.verifyToken.calledOnceWithExactly(req.body.userToken)).to\n  .be.true;\nexpect(\n  res.send.calledOnceWithExactly({\n    success: false,\n    message: \"User has logged out.Kindly login again\",\n  })\n).to.be.true;",
                  "err": {},
                  "uuid": "b1b66180-0806-4cfd-afc3-cfae5174f933",
                  "parentUUID": "40e91700-ec27-4e33-ad8a-a54c57fe13ad",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should send error response if an error occurs",
                  "fullTitle": "User getUserDetails should send error response if an error occurs",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const errorMessage = \"Database error\";\nadminJWT.verifyToken.throws(new Error(errorMessage));\nawait user.getUserDetails(req, res);\nexpect(adminJWT.verifyToken.calledOnceWithExactly(req.body.userToken)).to\n  .be.true;\nexpect(\n  res.send.calledOnceWithExactly({\n    success: false,\n    message: errorMessage,\n  })\n).to.be.true;",
                  "err": {},
                  "uuid": "6b8b4771-393b-4612-96c4-e2b299ec460c",
                  "parentUUID": "40e91700-ec27-4e33-ad8a-a54c57fe13ad",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7990f04d-32e1-4e45-b9c5-5623f950db05",
                "10df71b8-8e12-4890-affb-eea27b576566",
                "b1b66180-0806-4cfd-afc3-cfae5174f933",
                "6b8b4771-393b-4612-96c4-e2b299ec460c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "0cd037de-a6d5-471d-8644-35045f04a2fe",
              "title": "updateProfile",
              "fullFile": "/home/nishant/Documents/6th sem/CS305/Final/Main Folder/server/test/user.test.js",
              "file": "/test/user.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"updateProfile\"",
                  "fullTitle": "User updateProfile \"before each\" hook in \"updateProfile\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "adminDB = {\n  findOne: stub(),\n  updateOne: stub(),\n  users: \"users\",\n};\nadminJWT = {\n  verifyToken: stub(),\n};\nreq = {\n  body: {\n    userToken: userToken,\n    city: city,\n    birthdate: birthdate,\n    address: address,\n  },\n};\nres = {\n  send: stub(),\n};\nuser = new User(adminDB, adminJWT);",
                  "err": {},
                  "uuid": "25c54b96-fdfd-43a8-9f75-dd4812b1cebc",
                  "parentUUID": "0cd037de-a6d5-471d-8644-35045f04a2fe",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [
                {
                  "title": "\"after each\" hook in \"updateProfile\"",
                  "fullTitle": "User updateProfile \"after each\" hook in \"updateProfile\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "restore();",
                  "err": {},
                  "uuid": "765390a4-925e-4acf-86cc-6af2f8983367",
                  "parentUUID": "0cd037de-a6d5-471d-8644-35045f04a2fe",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [
                {
                  "title": "should update profile if user exists and token is valid",
                  "fullTitle": "User updateProfile should update profile if user exists and token is valid",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const decodedToken = {\n  email: email,\n};\nadminJWT.verifyToken.returns(decodedToken);\nadminDB.findOne.resolves({ email: decodedToken.email });\nawait user.updateProfile(req, res);\nexpect(adminJWT.verifyToken.calledOnceWithExactly(req.body.userToken)).to\n  .be.true;\nexpect(\n  adminDB.findOne.calledOnceWithExactly(adminDB.users, {\n    email: decodedToken.email,\n  })\n).to.be.true;\nexpect(\n  adminDB.updateOne.calledOnceWithExactly(\n    adminDB.users,\n    { email: decodedToken.email },\n    {\n      $set: {\n        city: req.body.city,\n        birthdate: req.body.birthdate,\n        address: req.body.address,\n      },\n    }\n  )\n).to.be.true;\nexpect(\n  res.send.calledOnceWithExactly({\n    success: true,\n    message: \"Profile Updated Successfully\",\n  })\n).to.be.true;",
                  "err": {},
                  "uuid": "67ef03c6-b6d6-4c0b-9cef-2cc1114156e8",
                  "parentUUID": "0cd037de-a6d5-471d-8644-35045f04a2fe",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should send error response if token is expired",
                  "fullTitle": "User updateProfile should send error response if token is expired",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const tokenExpiredError = new TokenExpiredError(\"Token has expired\");\ntokenExpiredError.name = \"TokenExpiredError\";\nadminJWT.verifyToken.throws(tokenExpiredError);\nawait user.updateProfile(req, res);\nexpect(adminJWT.verifyToken.calledOnceWithExactly(req.body.userToken)).to\n  .be.true;\nexpect(\n  res.send.calledOnceWithExactly({\n    success: false,\n    message: \"Token has expired.\",\n  })\n).to.be.true;",
                  "err": {},
                  "uuid": "020cca74-3e51-4999-b8f7-010de18e5afc",
                  "parentUUID": "0cd037de-a6d5-471d-8644-35045f04a2fe",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should send error response if an error occurs during update",
                  "fullTitle": "User updateProfile should send error response if an error occurs during update",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const errorMessage = \"Database error\";\nadminJWT.verifyToken.throws(new Error(errorMessage));\nawait user.updateProfile(req, res);\nexpect(adminJWT.verifyToken.calledOnceWithExactly(req.body.userToken)).to\n  .be.true;\nexpect(\n  res.send.calledOnceWithExactly({\n    success: false,\n    message: \"Profile Updation Failed.\",\n  })\n).to.be.true;",
                  "err": {},
                  "uuid": "5ebd45fe-8232-4c61-a802-417e30d9d00a",
                  "parentUUID": "0cd037de-a6d5-471d-8644-35045f04a2fe",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should send error response if user does not exist",
                  "fullTitle": "User updateProfile should send error response if user does not exist",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const decodedToken = {\n  email: \"test@example.com\",\n};\nadminJWT.verifyToken.returns(decodedToken);\nadminDB.findOne.resolves(null);\nawait user.updateProfile(req, res);\nexpect(adminJWT.verifyToken.calledOnceWithExactly(req.body.userToken)).to\n  .be.true;\nexpect(\n  adminDB.findOne.calledOnceWithExactly(adminDB.users, {\n    email: decodedToken.email,\n  })\n).to.be.true;\nexpect(\n  res.send.calledOnceWithExactly({\n    success: false,\n    message: \"User does not exists\",\n  })\n).to.be.true;",
                  "err": {},
                  "uuid": "c856daa3-36db-44fc-a552-308a3aa770dc",
                  "parentUUID": "0cd037de-a6d5-471d-8644-35045f04a2fe",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "67ef03c6-b6d6-4c0b-9cef-2cc1114156e8",
                "020cca74-3e51-4999-b8f7-010de18e5afc",
                "5ebd45fe-8232-4c61-a802-417e30d9d00a",
                "c856daa3-36db-44fc-a552-308a3aa770dc"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "bb78b078-0cfc-4b51-8b59-834aaf713a8a",
              "title": "fillDetails",
              "fullFile": "/home/nishant/Documents/6th sem/CS305/Final/Main Folder/server/test/user.test.js",
              "file": "/test/user.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"fillDetails\"",
                  "fullTitle": "User fillDetails \"before each\" hook in \"fillDetails\"",
                  "timedOut": false,
                  "duration": 1,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "adminDB = {\n  findOne: stub(),\n  insertOne: stub(),\n  users: \"users\",\n};\nreq = {\n  body: {\n    email: email,\n    password: password,\n    name: \"user\",\n    handle: handle,\n  },\n};\nres = {\n  send: stub(),\n};\nuser = new User(adminDB);",
                  "err": {},
                  "uuid": "88bf204a-c16c-4959-bf88-a17e3eed1129",
                  "parentUUID": "bb78b078-0cfc-4b51-8b59-834aaf713a8a",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [
                {
                  "title": "\"after each\" hook in \"fillDetails\"",
                  "fullTitle": "User fillDetails \"after each\" hook in \"fillDetails\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "restore();",
                  "err": {},
                  "uuid": "3fa7e5e4-728b-4026-a53c-0e502560f0d1",
                  "parentUUID": "bb78b078-0cfc-4b51-8b59-834aaf713a8a",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [
                {
                  "title": "should send error response if user already exists",
                  "fullTitle": "User fillDetails should send error response if user already exists",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const existingUser = {\n  email: req.body.email,\n};\nadminDB.findOne.resolves(existingUser);\nawait user.fillDetails(req, res);\nexpect(\n  adminDB.findOne.calledOnceWithExactly(adminDB.users, {\n    email: req.body.email,\n  })\n).to.be.true;\nexpect(\n  res.send.calledOnceWithExactly({\n    success: false,\n    message: \"User already exists\",\n  })\n).to.be.true;",
                  "err": {},
                  "uuid": "028b5788-f869-4615-ac1f-f8dd7d029e09",
                  "parentUUID": "bb78b078-0cfc-4b51-8b59-834aaf713a8a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should send error response if any required detail is missing",
                  "fullTitle": "User fillDetails should send error response if any required detail is missing",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "req.body.email = \"\";\nreq.body.password = \"\";\nreq.body.name = \"\";\nreq.body.handle = \"\";\nawait user.fillDetails(req, res);\nexpect(\n  res.send.calledOnceWithExactly({\n    success: false,\n    message: \"Please fill all the details.\",\n  })\n).to.be.true;",
                  "err": {},
                  "uuid": "54d69106-e747-403e-9190-14c391448ef1",
                  "parentUUID": "bb78b078-0cfc-4b51-8b59-834aaf713a8a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should send error response if bcrypt hash fails",
                  "fullTitle": "User fillDetails should send error response if bcrypt hash fails",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const errorMessage = \"Bcrypt hash failed\";\nstub(bcrypt, \"hash\").yields(new Error(errorMessage));\nawait user.fillDetails(req, res);\nexpect(\n  res.send.calledOnceWithExactly({\n    success: false,\n    message: \"User Registration Failed due to some internal error.\",\n  })\n).to.be.true;\nrestore();",
                  "err": {},
                  "uuid": "11e76ce1-7a21-4a5b-9d11-dd50d2b7c1ec",
                  "parentUUID": "bb78b078-0cfc-4b51-8b59-834aaf713a8a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should register the user if all details are provided and user does not exist",
                  "fullTitle": "User fillDetails should register the user if all details are provided and user does not exist",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const hashedPassword = \"hashedPassword\";\nconst newUser = {\n  email: req.body.email,\n  password: hashedPassword,\n  name: req.body.name,\n  handle: req.body.handle,\n  type: \"0\",\n  city: null,\n  birthdate: null,\n  address: null,\n};\nstub(bcrypt, \"hash\").callsFake((_password, _len, callback) => {\n  callback(null, hashedPassword);\n});\nadminDB.findOne.resolves(null);\nawait user.fillDetails(req, res);\nexpect(\n  adminDB.findOne.calledOnceWithExactly(adminDB.users, {\n    email: req.body.email,\n  })\n).to.be.true;\nexpect(bcrypt.hash.called).to.be.true;\nexpect(adminDB.insertOne.calledWithExactly(adminDB.users, newUser)).to.be\n  .true;\nexpect(\n  adminDB.insertOne.calledWithExactly(adminDB.solved, {\n    handle: req.body.handle,\n    problems: [],\n  })\n).to.be.true;\nexpect(\n  res.send.calledOnceWithExactly({\n    success: true,\n    message: \"User Registered Successfully\",\n  })\n).to.be.true;\nrestore();",
                  "err": {},
                  "uuid": "b533958f-0929-466d-b3e3-385ff0780982",
                  "parentUUID": "bb78b078-0cfc-4b51-8b59-834aaf713a8a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should send error response if user registration fails",
                  "fullTitle": "User fillDetails should send error response if user registration fails",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const hashedPassword = \"hashedPassword\";\nstub(bcrypt, \"hash\").callsFake((_password, _len, callback) => {\n  callback(null, hashedPassword);\n});\nadminDB.findOne.resolves(null);\nadminDB.insertOne.throws(new Error(\"Database error\"));\nawait user.fillDetails(req, res);\nexpect(\n  adminDB.findOne.calledOnceWithExactly(adminDB.users, {\n    email: req.body.email,\n  })\n).to.be.true;\nexpect(bcrypt.hash.called).to.be.true;\nexpect(\n  adminDB.insertOne.calledOnceWithExactly(adminDB.users, {\n    email: req.body.email,\n    password: hashedPassword,\n    name: req.body.name,\n    handle: req.body.handle,\n    type: \"0\",\n    city: null,\n    birthdate: null,\n    address: null,\n  })\n).to.be.true;\nexpect(\n  res.send.calledOnceWithExactly({\n    success: false,\n    message: \"User Registration Failed\",\n  })\n).to.be.true;\nrestore();",
                  "err": {},
                  "uuid": "d04ae432-f82d-4f97-8e42-cfb909046fab",
                  "parentUUID": "bb78b078-0cfc-4b51-8b59-834aaf713a8a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "028b5788-f869-4615-ac1f-f8dd7d029e09",
                "54d69106-e747-403e-9190-14c391448ef1",
                "11e76ce1-7a21-4a5b-9d11-dd50d2b7c1ec",
                "b533958f-0929-466d-b3e3-385ff0780982",
                "d04ae432-f82d-4f97-8e42-cfb909046fab"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "322093ea-a966-405d-83aa-dd2bb3387e34",
              "title": "verifyOTP",
              "fullFile": "/home/nishant/Documents/6th sem/CS305/Final/Main Folder/server/test/user.test.js",
              "file": "/test/user.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"verifyOTP\"",
                  "fullTitle": "User verifyOTP \"before each\" hook in \"verifyOTP\"",
                  "timedOut": false,
                  "duration": 1,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "adminDB = {\n  findOne: stub(),\n  deleteOne: stub(),\n  otp: \"otp\",\n};\nreq = {\n  body: {\n    email: email,\n    otp: otp,\n  },\n};\nres = {\n  send: stub(),\n};\nuser = new User(adminDB, {}, {});",
                  "err": {},
                  "uuid": "4ac3d43a-f817-4b47-b50c-a4d1986cf615",
                  "parentUUID": "322093ea-a966-405d-83aa-dd2bb3387e34",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should send success response if OTP matches",
                  "fullTitle": "User verifyOTP should send success response if OTP matches",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "adminDB.findOne.resolves({\n  email: req.body.email,\n  otp: req.body.otp,\n});\nawait user.verifyOTP(req, res);\nexpect(\n  adminDB.findOne.calledOnceWithExactly(adminDB.otp, {\n    email: req.body.email,\n  })\n).to.be.true;\nexpect(\n  adminDB.deleteOne.calledOnceWithExactly(adminDB.otp, {\n    email: req.body.email,\n  })\n).to.be.true;\nexpect(\n  res.send.calledOnceWithExactly({\n    success: true,\n    message: \"OTP Verified Successfully\",\n  })\n).to.be.true;",
                  "err": {},
                  "uuid": "4634f415-7383-4023-b53a-2a46d93abbb8",
                  "parentUUID": "322093ea-a966-405d-83aa-dd2bb3387e34",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should send error response if OTP does not match",
                  "fullTitle": "User verifyOTP should send error response if OTP does not match",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "adminDB.findOne.resolves({\n  email: req.body.email,\n  otp: \"wrongOTP\",\n});\nawait user.verifyOTP(req, res);\nexpect(\n  adminDB.findOne.calledOnceWithExactly(adminDB.otp, {\n    email: req.body.email,\n  })\n).to.be.true;\nexpect(\n  res.send.calledOnceWithExactly({\n    success: false,\n    message: \"Invalid OTP\",\n  })\n).to.be.true;",
                  "err": {},
                  "uuid": "ee415e58-87c8-43cb-8bb0-86d3e7af8c5a",
                  "parentUUID": "322093ea-a966-405d-83aa-dd2bb3387e34",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should send error response if OTP verification fails",
                  "fullTitle": "User verifyOTP should send error response if OTP verification fails",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "adminDB.findOne.throws(new Error(\"Database error\"));\nawait user.verifyOTP(req, res);\nexpect(\n  adminDB.findOne.calledOnceWithExactly(adminDB.otp, {\n    email: req.body.email,\n  })\n).to.be.true;\nexpect(\n  res.send.calledOnceWithExactly({\n    success: false,\n    message: \"OTP Verification Failed.\",\n  })\n).to.be.true;",
                  "err": {},
                  "uuid": "10e89b4e-3bff-4ece-9434-380fbd9f5c3d",
                  "parentUUID": "322093ea-a966-405d-83aa-dd2bb3387e34",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4634f415-7383-4023-b53a-2a46d93abbb8",
                "ee415e58-87c8-43cb-8bb0-86d3e7af8c5a",
                "10e89b4e-3bff-4ece-9434-380fbd9f5c3d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "7f9107e0-1f80-488f-a8c1-c2843dca120c",
              "title": "sendOTP",
              "fullFile": "/home/nishant/Documents/6th sem/CS305/Final/Main Folder/server/test/user.test.js",
              "file": "/test/user.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"sendOTP\"",
                  "fullTitle": "User sendOTP \"before each\" hook in \"sendOTP\"",
                  "timedOut": false,
                  "duration": 1,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Mocking req and res objects\nreq = { body: { email: email } };\nres = {\n  send: stub(),\n};\n// Mocking adminDB and adminMail objects\nadminDB = {\n  findOne: stub(),\n  updateOne: stub(),\n  insertOne: stub(),\n  users: \"users\",\n  otp: \"otp\",\n};\nadminMail = {\n  sendOTP: stub(),\n};\n// Importing the sendOTP function\nuser = new User(adminDB, {}, adminMail);",
                  "err": {},
                  "uuid": "f35c9146-da50-4b03-887c-99b824f117a2",
                  "parentUUID": "7f9107e0-1f80-488f-a8c1-c2843dca120c",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should send OTP and respond with success message if user does not exist",
                  "fullTitle": "User sendOTP should send OTP and respond with success message if user does not exist",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Stubbing adminDB.findOne to return null (user does not exist)\nadminDB.findOne.returns(null);\nconst mathRandomStub = stub(Math, \"random\").returns(0.5);\nconst mathFloorStub = stub(Math, \"floor\").returns(500000);\n// Calling the sendOTP function\nawait user.sendOTP(req, res);\n// Assertions\nexpect(adminDB.findOne.callCount).to.equal(2);\nexpect(\n  adminDB.findOne.calledWithExactly(adminDB.users, {\n    email: req.body.email,\n  })\n).to.be.true;\nexpect(mathRandomStub.calledOnce).to.be.true;\nexpect(mathFloorStub.calledOnce).to.be.true;\nexpect(adminMail.sendOTP.calledOnceWith(req.body.email, 500000)).to.be\n  .true;\nexpect(\n  adminDB.findOne.calledWithExactly(adminDB.otp, {\n    email: req.body.email,\n  })\n).to.be.true;\nexpect(\n  adminDB.insertOne.calledOnceWith(adminDB.otp, {\n    email: req.body.email,\n    otp: 500000,\n  })\n).to.be.true;\nexpect(\n  res.send.calledOnceWith({\n    success: true,\n    message: \"OTP Sent Successfully\",\n  })\n).to.be.true;\nmathRandomStub.restore();\nmathFloorStub.restore();",
                  "err": {},
                  "uuid": "ad760db6-dda7-4e3e-942a-682f899cdd22",
                  "parentUUID": "7f9107e0-1f80-488f-a8c1-c2843dca120c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should send OTP and respond with success message if otp exists in the otp collection",
                  "fullTitle": "User sendOTP should send OTP and respond with success message if otp exists in the otp collection",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Stubbing adminDB.findOne to return null (user does not exist)\nadminDB.findOne.onCall(0).returns(null);\nadminDB.findOne.onCall(1).returns(true);\nconst mathRandomStub = stub(Math, \"random\").returns(0.5);\nconst mathFloorStub = stub(Math, \"floor\").returns(500000);\n// Calling the sendOTP function\nawait user.sendOTP(req, res);\n// Assertions\nexpect(\n  adminDB.findOne.calledWithExactly(adminDB.users, {\n    email: req.body.email,\n  })\n).to.be.true;\nexpect(mathRandomStub.calledOnce).to.be.true;\nexpect(mathFloorStub.calledOnce).to.be.true;\nexpect(adminMail.sendOTP.calledOnceWith(req.body.email, 500000)).to.be\n  .true;\nexpect(\n  adminDB.updateOne.calledOnceWith(\n    adminDB.otp,\n    { email: email },\n    { $set: { otp: 500000 } }\n  )\n).to.be.true;\nexpect(\n  res.send.calledOnceWith({\n    success: true,\n    message: \"OTP Sent Successfully\",\n  })\n).to.be.true;\nmathRandomStub.restore();\nmathFloorStub.restore();",
                  "err": {},
                  "uuid": "c6e96ae5-36ca-4db7-b638-bb9e2e88b705",
                  "parentUUID": "7f9107e0-1f80-488f-a8c1-c2843dca120c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should send error response if user already exists",
                  "fullTitle": "User sendOTP should send error response if user already exists",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Stubbing adminDB.findOne to return a user (user already exists)\nadminDB.findOne.returns({ email: email });\n// Calling the sendOTP function\nawait user.sendOTP(req, res);\n// Assertions\nexpect(\n  adminDB.findOne.calledOnceWith(adminDB.users, { email: req.body.email })\n).to.be.true;\nexpect(adminMail.sendOTP.notCalled).to.be.true;\nexpect(adminDB.insertOne.notCalled).to.be.true;\nexpect(\n  res.send.calledOnceWith({\n    success: false,\n    message: \"User already exists\",\n  })\n).to.be.true;",
                  "err": {},
                  "uuid": "db34e610-8153-4a73-9ac6-e0c6c709c4b3",
                  "parentUUID": "7f9107e0-1f80-488f-a8c1-c2843dca120c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle errors and respond with failure message",
                  "fullTitle": "User sendOTP should handle errors and respond with failure message",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Stubbing adminDB.findOne to throw an error\nadminDB.findOne.throws(new Error(\"Database error\"));\n// Calling the sendOTP function\nawait user.sendOTP(req, res);\n// Assertions\nexpect(\n  adminDB.findOne.calledOnceWith(adminDB.users, { email: req.body.email })\n).to.be.true;\nexpect(adminMail.sendOTP.notCalled).to.be.true;\nexpect(adminDB.insertOne.notCalled).to.be.true;\nexpect(\n  res.send.calledOnceWith({\n    success: false,\n    message: \"OTP generation failed.\",\n  })\n).to.be.true;",
                  "err": {},
                  "uuid": "dc954884-023d-4eda-8e24-952a92cc6af4",
                  "parentUUID": "7f9107e0-1f80-488f-a8c1-c2843dca120c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ad760db6-dda7-4e3e-942a-682f899cdd22",
                "c6e96ae5-36ca-4db7-b638-bb9e2e88b705",
                "db34e610-8153-4a73-9ac6-e0c6c709c4b3",
                "dc954884-023d-4eda-8e24-952a92cc6af4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 6,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f0a0bf35-efc3-480b-977f-d019ddfde91d",
              "title": "changePassword",
              "fullFile": "/home/nishant/Documents/6th sem/CS305/Final/Main Folder/server/test/user.test.js",
              "file": "/test/user.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"changePassword\"",
                  "fullTitle": "User changePassword \"before each\" hook in \"changePassword\"",
                  "timedOut": false,
                  "duration": 1,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "req = { body: { email: email, newPassword: newpassword } };\nres = {\n  send: stub(),\n};\nadminDB = {\n  findOne: stub(),\n  updateOne: stub(),\n  users: \"users\",\n};\nuser = new User(adminDB, {}, {});",
                  "err": {},
                  "uuid": "ae7caa84-0251-42dd-a799-680569a0eace",
                  "parentUUID": "f0a0bf35-efc3-480b-977f-d019ddfde91d",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should change password and respond with success message if user exists",
                  "fullTitle": "User changePassword should change password and respond with success message if user exists",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "adminDB.findOne.returns({ email: email });\nconst bcryptHashStub = stub(bcrypt, \"hash\")\n  .callsArgWith(2, null, hash);\nawait user.changePassword(req, res);\nexpect(\n  adminDB.findOne.calledOnceWith(adminDB.users, { email: req.body.email })\n).to.be.true;\nexpect(bcrypt.hash.calledOnceWith(req.body.newPassword, 10)).to.be.true;\nexpect(\n  adminDB.updateOne.calledOnceWith(\n    adminDB.users,\n    { email: req.body.email },\n    { $set: { password: hash } }\n  )\n).to.be.true;\nexpect(\n  res.send.calledOnceWith({\n    success: true,\n    message: \"Password Changed Successfully.\",\n  })\n).to.be.true;\nbcryptHashStub.restore();",
                  "err": {},
                  "uuid": "6d11c4e7-84e6-45fa-91ea-efdae9373893",
                  "parentUUID": "f0a0bf35-efc3-480b-977f-d019ddfde91d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should send error response if bcrypt.hash encounters an error",
                  "fullTitle": "User changePassword should send error response if bcrypt.hash encounters an error",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "adminDB.findOne.returns({ email: email });\nconst bcryptHashStub = stub(bcrypt, \"hash\")\n  .callsArgWith(2, new Error(\"Hashing error\"));\nawait user.changePassword(req, res);\nexpect(\n  adminDB.findOne.calledOnceWith(adminDB.users, { email: req.body.email })\n).to.be.true;\nexpect(bcrypt.hash.calledOnceWith(req.body.newPassword, 10)).to.be.true;\nexpect(adminDB.updateOne.notCalled).to.be.true;\nexpect(\n  res.send.calledOnceWith({\n    success: false,\n    message: \"Password Updation Failed due to some internal error.\",\n  })\n).to.be.true;\nbcryptHashStub.restore();",
                  "err": {},
                  "uuid": "2fc3476b-d041-4324-9fa1-606793f9595c",
                  "parentUUID": "f0a0bf35-efc3-480b-977f-d019ddfde91d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should send error response if user does not exist",
                  "fullTitle": "User changePassword should send error response if user does not exist",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "adminDB.findOne.returns(null);\nawait user.changePassword(req, res);\nexpect(\n  adminDB.findOne.calledOnceWith(adminDB.users, { email: req.body.email })\n).to.be.true;\nexpect(adminDB.updateOne.notCalled).to.be.true;\nexpect(\n  res.send.calledOnceWith({\n    success: false,\n    message: \"User does not exists.\",\n  })\n).to.be.true;",
                  "err": {},
                  "uuid": "98df7740-0363-4b50-a165-60c6ff3a646d",
                  "parentUUID": "f0a0bf35-efc3-480b-977f-d019ddfde91d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle errors and respond with failure message",
                  "fullTitle": "User changePassword should handle errors and respond with failure message",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "adminDB.findOne.throws(new Error(\"Database error\"));\nconst bcryptHashStub = stub(bcrypt, \"hash\")\n  .callsArgWith(2, new Error(\"Hashing error\"));\nawait user.changePassword(req, res);\nexpect(\n  adminDB.findOne.calledOnceWith(adminDB.users, { email: req.body.email })\n).to.be.true;\nexpect(bcrypt.hash.notCalled).to.be.true;\nexpect(adminDB.updateOne.notCalled).to.be.true;\nexpect(\n  res.send.calledOnceWith({\n    success: false,\n    message: \"Password Updation Failed due to some internal error.\",\n  })\n).to.be.true;\nbcryptHashStub.restore();",
                  "err": {},
                  "uuid": "db4ace13-6932-4569-b016-1909ebcfad0b",
                  "parentUUID": "f0a0bf35-efc3-480b-977f-d019ddfde91d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6d11c4e7-84e6-45fa-91ea-efdae9373893",
                "2fc3476b-d041-4324-9fa1-606793f9595c",
                "98df7740-0363-4b50-a165-60c6ff3a646d",
                "db4ace13-6932-4569-b016-1909ebcfad0b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "604c7935-a7d0-4afd-a4bb-f176ae12c351",
              "title": "userLogout",
              "fullFile": "/home/nishant/Documents/6th sem/CS305/Final/Main Folder/server/test/user.test.js",
              "file": "/test/user.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"userLogout\"",
                  "fullTitle": "User userLogout \"before each\" hook in \"userLogout\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Mocking req and res objects\nreq = { body: { userToken: 'validToken' } };\nres = {\n  send: stub(),\n};\n  \n// Mocking adminJWT and adminDB objects\nadminJWT = {\n  verifyToken: stub(),\n};\n  \nadminDB = {\n  findOne: stub(),\n  users: 'users',\n};\n\n// Importing the userLogout function\nuser = new User(adminDB, adminJWT, {});",
                  "err": {},
                  "uuid": "ce42e236-311c-4df6-9934-0c6f26a683a9",
                  "parentUUID": "604c7935-a7d0-4afd-a4bb-f176ae12c351",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [
                {
                  "title": "\"after each\" hook in \"userLogout\"",
                  "fullTitle": "User userLogout \"after each\" hook in \"userLogout\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Restoring the stubbed functions to their original implementation\nrestore();",
                  "err": {},
                  "uuid": "6b39f708-ed01-42cb-91c2-bc8d4243acd0",
                  "parentUUID": "604c7935-a7d0-4afd-a4bb-f176ae12c351",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [
                {
                  "title": "should send success response if user exists",
                  "fullTitle": "User userLogout should send success response if user exists",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Stubbing adminJWT.verifyToken to return email\nadminJWT.verifyToken.returns({ email: email });\n  \n// Stubbing adminDB.findOne to return user data\nadminDB.findOne.returns({ email: email });\n  \n// Calling the userLogout function\nawait user.userLogout(req, res);\n  \n// Assertions\nexpect(adminJWT.verifyToken.calledOnceWith(req.body.userToken)).to.be.true;\nexpect(adminDB.findOne.calledOnceWith(adminDB.users, { email: email })).to.be.true;\nexpect(res.send.calledOnceWith({\n  success: true,\n  message: 'User Logged Out Successfully',\n  userToken: '',\n})).to.be.true;",
                  "err": {},
                  "uuid": "9c25d32d-2de2-4d8f-a0c4-409c3edeffeb",
                  "parentUUID": "604c7935-a7d0-4afd-a4bb-f176ae12c351",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should send error response if user does not exist",
                  "fullTitle": "User userLogout should send error response if user does not exist",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Stubbing adminJWT.verifyToken to return email\nadminJWT.verifyToken.returns({ email: email });\n  \n// Stubbing adminDB.findOne to return null (user does not exist)\nadminDB.findOne.returns(null);\n  \n// Calling the userLogout function\nawait user.userLogout(req, res);\n  \n// Assertions\nexpect(adminJWT.verifyToken.calledOnceWith(req.body.userToken)).to.be.true;\nexpect(adminDB.findOne.calledOnceWith(adminDB.users, { email: email })).to.be.true;\nexpect(res.send.calledOnceWith({\n  success: false,\n  message: 'User does not exists',\n})).to.be.true;",
                  "err": {},
                  "uuid": "bbe8f858-21c8-40e3-977f-6610c884951d",
                  "parentUUID": "604c7935-a7d0-4afd-a4bb-f176ae12c351",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle TokenExpiredError and send appropriate response",
                  "fullTitle": "User userLogout should handle TokenExpiredError and send appropriate response",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Stubbing adminJWT.verifyToken to throw TokenExpiredError\nadminJWT.verifyToken.throws(new TokenExpiredError('Token expired'));\n  \n// Calling the userLogout function\nawait user.userLogout(req, res);\n  \n// Assertions\nexpect(adminJWT.verifyToken.calledOnceWith(req.body.userToken)).to.be.true;\nexpect(res.send.calledOnceWith({\n  success: false,\n  message: 'User has been logged out.',\n})).to.be.true;",
                  "err": {},
                  "uuid": "71caa475-46a5-4f6e-b286-9ffde987653b",
                  "parentUUID": "604c7935-a7d0-4afd-a4bb-f176ae12c351",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle JsonWebTokenError and send appropriate response",
                  "fullTitle": "User userLogout should handle JsonWebTokenError and send appropriate response",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Stubbing adminJWT.verifyToken to throw JsonWebTokenError\nadminJWT.verifyToken.throws(new JsonWebTokenError('Invalid token'));\n  \n// Calling the userLogout function\nawait user.userLogout(req, res);\n  \n// Assertions\nexpect(adminJWT.verifyToken.calledOnceWith(req.body.userToken)).to.be.true;\nexpect(res.send.calledOnceWith({\n  success: false,\n  message: \"User has logged out.Kindly login again\",\n})).to.be.true;",
                  "err": {},
                  "uuid": "a76f9e06-2ae9-4eb5-8c4a-f7ac069d0442",
                  "parentUUID": "604c7935-a7d0-4afd-a4bb-f176ae12c351",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle other errors and send appropriate response",
                  "fullTitle": "User userLogout should handle other errors and send appropriate response",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Stubbing adminJWT.verifyToken to throw an error\nadminJWT.verifyToken.throws(new Error('Some error'));\n  \n// Calling the userLogout function\nawait user.userLogout(req, res);\n  \n// Assertions\nexpect(adminJWT.verifyToken.calledOnceWith(req.body.userToken)).to.be.true;\nexpect(res.send.calledOnceWith({\n  success: false,\n  message: 'Some error',\n})).to.be.true;",
                  "err": {},
                  "uuid": "684a963c-fee6-4d35-99f9-c8c6e1aecdfe",
                  "parentUUID": "604c7935-a7d0-4afd-a4bb-f176ae12c351",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9c25d32d-2de2-4d8f-a0c4-409c3edeffeb",
                "bbe8f858-21c8-40e3-977f-6610c884951d",
                "71caa475-46a5-4f6e-b286-9ffde987653b",
                "a76f9e06-2ae9-4eb5-8c4a-f7ac069d0442",
                "684a963c-fee6-4d35-99f9-c8c6e1aecdfe"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "226c518f-39b2-4fff-808d-0543b7880fbb",
              "title": "getAllHandles",
              "fullFile": "/home/nishant/Documents/6th sem/CS305/Final/Main Folder/server/test/user.test.js",
              "file": "/test/user.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"getAllHandles\"",
                  "fullTitle": "User getAllHandles \"before each\" hook in \"getAllHandles\"",
                  "timedOut": false,
                  "duration": 1,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Mocking req and res objects\nreq = {};\nres = {\n  send: stub(),\n};\n  \n// Mocking adminDB object\nadminDB = {\n  find: stub(),\n  users: 'users',\n};\n  \nuser = new User(adminDB, {}, {});",
                  "err": {},
                  "uuid": "3c7e206f-e7a3-4c03-a94c-fbe2c84c0e17",
                  "parentUUID": "226c518f-39b2-4fff-808d-0543b7880fbb",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [
                {
                  "title": "\"after each\" hook in \"getAllHandles\"",
                  "fullTitle": "User getAllHandles \"after each\" hook in \"getAllHandles\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Restoring the stubbed functions to their original implementation\nrestore();",
                  "err": {},
                  "uuid": "e35f3127-b6bc-4d67-a136-0366b161118e",
                  "parentUUID": "226c518f-39b2-4fff-808d-0543b7880fbb",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [
                {
                  "title": "should fetch all handles and send success response",
                  "fullTitle": "User getAllHandles should fetch all handles and send success response",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Stubbing adminDB.find to return user data\nconst users = [\n  { handle: 'handle1' },\n  { handle: 'handle2' },\n  { handle: 'handle3' },\n];\nadminDB.find.returns(users);\n  \n// Calling the getAllHandles function\nawait user.getAllHandles(req, res);\n  \n// Assertions\nexpect(adminDB.find.calledOnceWith(adminDB.users, {})).to.be.true;\nexpect(res.send.calledOnceWith({\n  success: true,\n  message: 'All Handles',\n  handles: ['handle1', 'handle2', 'handle3'],\n})).to.be.true;",
                  "err": {},
                  "uuid": "88cf5f72-c0d8-4079-8c24-42d59db788c3",
                  "parentUUID": "226c518f-39b2-4fff-808d-0543b7880fbb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle errors and send error response",
                  "fullTitle": "User getAllHandles should handle errors and send error response",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Stubbing adminDB.find to throw an error\nadminDB.find.throws(new Error('Database error'));\n  \n// Calling the getAllHandles function\nawait user.getAllHandles(req, res);\n  \n// Assertions\nexpect(adminDB.find.calledOnceWith(adminDB.users, {})).to.be.true;\nexpect(res.send.calledOnceWith({\n  success: false,\n  message: 'Error in fetching handles',\n})).to.be.true;",
                  "err": {},
                  "uuid": "9ee8a3e0-2540-41f1-b55a-727c2c4d52f3",
                  "parentUUID": "226c518f-39b2-4fff-808d-0543b7880fbb",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "88cf5f72-c0d8-4079-8c24-42d59db788c3",
                "9ee8a3e0-2540-41f1-b55a-727c2c4d52f3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "custom-report",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportFilename": "custom-report",
        "reportDir": "reports"
      },
      "version": "6.2.0"
    }
  }
}